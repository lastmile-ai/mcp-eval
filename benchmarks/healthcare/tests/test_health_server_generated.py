import pytest
import mcp_eval
from mcp_eval import Expect
from mcp_eval.session import TestAgent
from mcp_agent.agents.agent_spec import AgentSpec

# Pin tests to the intended server by configuring a suite-level AgentSpec.
# This avoids relying on whatever the current default agent is in mcpeval.yaml.
@mcp_eval.setup
def _configure_suite_agent():
    mcp_eval.use_agent(
        AgentSpec(
            name="generated-pytest",
            instruction="You are a helpful assistant that can use MCP servers effectively.",
            server_names=["health_server"],
        )
    )

@pytest.mark.asyncio
async def test_basic_drug_lookup(agent: TestAgent):
    response = await agent.generate_str("Can you look up information about aspirin?")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'aspirin'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides basic information about aspirin from FDA data", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("aspirin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides relevant information about aspirin, including basic drug information such as uses, dosage, side effects, or mechanism of action. The information should be medically accurate and helpful to someone seeking general information about aspirin.", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='aspirin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(3))

@pytest.mark.asyncio
async def test_drug_adverse_events(agent: TestAgent):
    response = await agent.generate_str("What are the reported adverse events for metformin?")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'metformin', 'search_type': 'adverse_events'}))
    await agent.session.assert_that(Expect.judge.llm("Response discusses adverse events reported for metformin", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.content.contains("metformin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("adverse", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides specific information about adverse events or side effects associated with metformin. It should include common adverse events like gastrointestinal issues, lactic acidosis risk, or other documented side effects. The information should be medically accurate and sourced from FDA data.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='adverse', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))

@pytest.mark.asyncio
async def test_drug_label_information(agent: TestAgent):
    response = await agent.generate_str("I need the drug labeling information for warfarin")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'warfarin', 'search_type': 'label'}))
    await agent.session.assert_that(Expect.content.contains("label", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("warfarin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides specific drug labeling information for warfarin, which should include details like indications, dosage, contraindications, warnings, precautions, or other official labeling content. The information should be comprehensive and sourced from FDA labeling data.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='warfarin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='label', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))

@pytest.mark.asyncio
async def test_pubmed_diabetes_research(agent: TestAgent):
    response = await agent.generate_str("Find recent research on type 2 diabetes treatment")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'type 2 diabetes treatment'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides research findings on type 2 diabetes treatment", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.content.contains("type 2 diabetes", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("treatment", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides relevant recent research findings about type 2 diabetes treatment from PubMed. It should include study titles, authors, publication information, or summaries of research findings. The content should be focused on treatment approaches and be from credible medical literature.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='diabetes', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'date_range': '5'}))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(3))

@pytest.mark.asyncio
async def test_pubmed_limited_results(agent: TestAgent):
    response = await agent.generate_str("Search for 3 recent studies on hypertension published in the last 2 years")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'hypertension', 'max_results': 3, 'date_range': '2'}))
    await agent.session.assert_that(Expect.content.contains("hypertension", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("studies", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides exactly 3 recent studies on hypertension from the last 2 years. It should include study titles, publication information, and brief descriptions or findings. The studies should be relevant to hypertension research and clearly from recent publications within the specified timeframe.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='hypertension', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response respects the user\u0027s request for exactly 3 studies and mentions or implies the 2-year timeframe constraint. The content should not exceed the requested number of studies.", min_score=0.7), response=response)

@pytest.mark.asyncio
async def test_health_topic_depression(agent: TestAgent):
    response = await agent.generate_str("I need health information about depression")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'depression'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides evidence-based health information about depression", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("depression", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive, evidence-based health information about depression. It should include key aspects such as symptoms, causes, treatment options, diagnosis criteria, or management strategies. The information should be accurate, helpful, and appropriate for general health education.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='depression', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'language': 'en'}))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("health", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_health_topic_spanish(agent: TestAgent):
    response = await agent.generate_str("Necesito informaci\u00f3n sobre diabetes en espa\u00f1ol")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'diabetes', 'language': 'es'}))
    await agent.session.assert_that(Expect.content.contains("diabetes", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides health information about diabetes in Spanish or acknowledges the Spanish language request. The content should be relevant to diabetes education and either be in Spanish or explain how Spanish-language information was retrieved.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='diabetes', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response appropriately handles the Spanish language request, either by providing Spanish content, acknowledging the language preference, or explaining language capabilities for health information about diabetes.", min_score=0.7), response=response)

@pytest.mark.asyncio
async def test_clinical_trials_cancer(agent: TestAgent):
    response = await agent.generate_str("Find recruiting clinical trials for breast cancer")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'breast cancer', 'status': 'recruiting'}))
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("breast cancer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recruiting", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides information about recruiting clinical trials specifically for breast cancer. It should include trial details such as study titles, enrollment status, locations, or contact information. The trials should be currently recruiting participants.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='breast cancer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='recruiting', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))

@pytest.mark.asyncio
async def test_clinical_trials_completed(agent: TestAgent):
    response = await agent.generate_str("Show me completed clinical trials for Alzheimer\u0027s disease")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': "Alzheimer's disease", 'status': 'completed'}))
    await agent.session.assert_that(Expect.judge.llm("Response lists completed clinical trials for Alzheimer\u0027s disease", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.content.contains("Alzheimer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("completed", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides information about completed clinical trials specifically for Alzheimer\u0027s disease. It should include trial details such as study titles, completion status, results if available, or study outcomes. The trials should be clearly identified as completed.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='Alzheimer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='completed', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))

@pytest.mark.asyncio
async def test_icd10_code_lookup(agent: TestAgent):
    response = await agent.generate_str("What does ICD-10 code E11.9 mean?")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'code': 'E11.9'}))
    await agent.session.assert_that(Expect.content.contains("diabetes", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("E11.9", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides the meaning and description of ICD-10 code E11.9. It should explain what medical condition or diagnosis this code represents, including relevant clinical information about the condition.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='E11.9', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(6000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))

@pytest.mark.asyncio
async def test_icd10_description_search(agent: TestAgent):
    response = await agent.generate_str("Find ICD-10 codes for pneumonia")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'pneumonia'}))
    await agent.session.assert_that(Expect.content.contains("pneumonia", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides relevant ICD-10 codes for pneumonia conditions. It should include specific codes (like J12, J13, J14, J15, J18, etc.) with their descriptions for different types of pneumonia (bacterial, viral, unspecified, etc.).", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='pneumonia', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("J1", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.response_time_under(6000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response shows multiple pneumonia-related ICD-10 codes, demonstrating that the search returned a comprehensive list of relevant codes for different pneumonia types and specifications.", min_score=0.7), response=response)

@pytest.mark.asyncio
async def test_comprehensive_drug_research(agent: TestAgent):
    response = await agent.generate_str("I need comprehensive information about lisinopril including FDA data and recent research")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'lisinopril'}))
    await agent.session.assert_that(Expect.judge.llm("Response combines FDA drug information with recent research findings", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'lisinopril'}))
    await agent.session.assert_that(Expect.tools.sequence(["fda_drug_lookup", "pubmed_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("lisinopril", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("FDA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive information about lisinopril that includes both FDA regulatory data and recent research findings. It should cover multiple aspects such as drug approval information, clinical studies, safety data, efficacy, and current research trends.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='lisinopril', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='lisinopril', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(15000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.judge.llm("The response integrates information from both FDA data and recent research to provide a well-rounded view of lisinopril, demonstrating synthesis of regulatory and scientific information sources.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_medication_safety_profile(agent: TestAgent):
    response = await agent.generate_str("What\u0027s the safety profile of atorvastatin? Include adverse events and recent studies")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'atorvastatin', 'search_type': 'adverse_events'}))
    await agent.session.assert_that(Expect.content.contains("safety", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'atorvastatin safety'}))
    await agent.session.assert_that(Expect.tools.sequence(["fda_drug_lookup", "pubmed_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("atorvastatin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("adverse", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides a comprehensive safety profile of atorvastatin including adverse events from FDA data and recent safety studies. It should cover common side effects, serious adverse reactions, contraindications, and recent research findings on safety.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='atorvastatin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='adverse', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='atorvastatin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(4))

@pytest.mark.asyncio
async def test_clinical_condition_overview(agent: TestAgent):
    response = await agent.generate_str("Give me an overview of atrial fibrillation including general health information and current clinical trials")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'atrial fibrillation'}))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'atrial fibrillation'}))
    await agent.session.assert_that(Expect.tools.sequence(["health_topics_search", "clinical_trials_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("atrial fibrillation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("overview", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides a comprehensive overview of atrial fibrillation that includes both general health information (symptoms, causes, treatment options, management) and information about current clinical trials. It should integrate educational content with research opportunities.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='atrial fibrillation', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='atrial fibrillation', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates integration of health education information and clinical research opportunities, providing both patient education and research participation information for atrial fibrillation.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_pubmed_cardiovascular_meta_analysis(agent: TestAgent):
    response = await agent.generate_str("Find 10 meta-analyses on cardiovascular disease prevention from the last 5 years")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'cardiovascular disease prevention meta-analysis', 'max_results': 10, 'date_range': '5'}))
    await agent.session.assert_that(Expect.content.contains("meta-analysis", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cardiovascular", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("prevention", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides 10 meta-analyses specifically focused on cardiovascular disease prevention from the last 5 years. Each entry should include study titles, authors, publication information, and brief summaries of findings. The studies should be clearly identified as meta-analyses.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='cardiovascular', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='meta-analysis', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response respects the specific request for exactly 10 meta-analyses and mentions or implies the 5-year timeframe constraint. The content should focus specifically on prevention rather than treatment.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_drug_interaction_research(agent: TestAgent):
    response = await agent.generate_str("Research drug interactions with warfarin")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'warfarin drug interactions'}))
    await agent.session.assert_that(Expect.content.contains("interaction", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'warfarin', 'search_type': 'label'}))
    await agent.session.assert_that(Expect.tools.sequence(["fda_drug_lookup", "pubmed_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("warfarin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("drug", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive information about drug interactions with warfarin, including specific medications that interact, mechanisms of interaction, clinical significance, and management recommendations. It should combine FDA labeling information with research evidence.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='warfarin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='warfarin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='interaction', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(3))

@pytest.mark.asyncio
async def test_multiple_clinical_trials_status(agent: TestAgent):
    response = await agent.generate_str("Show me all clinical trials for COVID-19, regardless of status")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'COVID-19', 'status': 'all'}))
    await agent.session.assert_that(Expect.content.contains("COVID", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("COVID-19", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides clinical trials for COVID-19 across all statuses (recruiting, not recruiting, completed, active). It should include trials with different status types and demonstrate that the search captured trials regardless of their current status.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='COVID-19', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response shows trials with various statuses (recruiting, completed, active, etc.) demonstrating that the \u0027all\u0027 status parameter was correctly applied to capture trials regardless of their current status.", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.content.contains("status", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_migraine_comprehensive_lookup(agent: TestAgent):
    response = await agent.generate_str("I need everything about migraine: health information, ICD codes, and current research")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'migraine'}))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'migraine'}))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'migraine'}))
    await agent.session.assert_that(Expect.tools.sequence(["health_topics_search", "medical_terminology_lookup", "pubmed_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("migraine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive information about migraine including health/educational information, ICD-10 codes, and current research findings. It should integrate information from multiple sources to give a complete overview covering symptoms, diagnosis codes, and recent studies.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='migraine', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='migraine', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='migraine', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(15000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(5))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates integration of health education, medical coding, and research information, providing a well-rounded comprehensive view of migraine from multiple medical information perspectives.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_insulin_types_fda_data(agent: TestAgent):
    response = await agent.generate_str("Compare different insulin types using FDA data")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=2))
    await agent.session.assert_that(Expect.content.contains("insulin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("Response compares different insulin medications based on FDA information", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'insulin'}))
    await agent.session.assert_that(Expect.content.contains("FDA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("compare", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response compares different insulin types (such as rapid-acting, short-acting, intermediate-acting, long-acting) using FDA regulatory data. It should include information about different insulin formulations, their approval status, indications, dosing, and key differences based on FDA labeling information.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='insulin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates comparison between multiple insulin types, showing differences in onset, duration, peak action, or other FDA-documented characteristics. It should present comparative information rather than just individual drug descriptions.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("type", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_pediatric_asthma_trials(agent: TestAgent):
    response = await agent.generate_str("Find active clinical trials for pediatric asthma, limit to 5 results")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'pediatric asthma', 'status': 'active', 'max_results': 5}))
    await agent.session.assert_that(Expect.content.contains("asthma", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pediatric", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("active", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides exactly 5 active clinical trials specifically for pediatric asthma. It should include trial details such as study titles, enrollment status, age criteria, and treatment focus. The trials should be clearly active and focused on children/pediatric populations.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='asthma', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='active', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response respects the limit of 5 results and focuses specifically on pediatric/children populations rather than general asthma trials. The content should not exceed the requested number of trials.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_antidepressant_safety_comparison(agent: TestAgent):
    response = await agent.generate_str("Compare the safety profiles of sertraline and fluoxetine")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=2))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'sertraline', 'search_type': 'adverse_events'}))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'fluoxetine', 'search_type': 'adverse_events'}))
    await agent.session.assert_that(Expect.content.contains("sertraline", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("fluoxetine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("safety", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("compare", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides a comparative analysis of the safety profiles of sertraline and fluoxetine. It should include adverse events, side effect profiles, contraindications, warnings, and key safety differences between the two antidepressants based on FDA data.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='sertraline', field_path=None, match_type="contains", case_sensitive=False, call_index=0))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='fluoxetine', field_path=None, match_type="contains", case_sensitive=False, call_index=1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates clear comparison between the two drugs\u0027 safety profiles, highlighting similarities and differences in adverse events, rather than just listing information about each drug separately.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_spanish_hypertension_info(agent: TestAgent):
    response = await agent.generate_str("Necesito informaci\u00f3n sobre hipertensi\u00f3n en espa\u00f1ol")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'hipertensión', 'language': 'es'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides health information about hypertension in Spanish", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.content.contains("hipertensi\u00f3n", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides health information about hypertension (hipertensi\u00f3n) in Spanish or acknowledges the Spanish language request. The content should be relevant to hypertension education and either be in Spanish or explain how Spanish-language information was retrieved.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='hipertensión', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response appropriately handles the Spanish language request for hypertension information, either by providing Spanish content, acknowledging the language preference, or explaining language capabilities for health information.", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.content.contains("espa\u00f1ol", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_extensive_icd10_search(agent: TestAgent):
    response = await agent.generate_str("Find up to 20 ICD-10 codes related to heart disease")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'heart disease', 'max_results': 20}))
    await agent.session.assert_that(Expect.content.contains("heart", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("heart disease", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("I", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides up to 20 ICD-10 codes related to heart disease. It should include various cardiovascular conditions with their corresponding codes (I00-I99 series) and descriptions. The codes should cover different types of heart conditions like coronary artery disease, heart failure, arrhythmias, etc.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='heart', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response shows multiple heart disease-related ICD-10 codes, respecting the request for up to 20 codes and demonstrating comprehensive coverage of cardiovascular conditions.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("20", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_recent_cancer_immunotherapy(agent: TestAgent):
    response = await agent.generate_str("Search for the latest research on cancer immunotherapy from the past year")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'cancer immunotherapy', 'date_range': '1'}))
    await agent.session.assert_that(Expect.content.contains("immunotherapy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cancer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides recent research findings on cancer immunotherapy from the past year. It should include study titles, publication information, and key findings or developments in cancer immunotherapy from recent literature.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='cancer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='immunotherapy', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response focuses on recent/latest research and mentions or implies the one-year timeframe constraint for the cancer immunotherapy studies presented.", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.content.contains("latest", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_acetaminophen_label_info(agent: TestAgent):
    response = await agent.generate_str("Get the complete drug labeling information for acetaminophen")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'acetaminophen', 'search_type': 'label'}))
    await agent.session.assert_that(Expect.content.contains("acetaminophen", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("label", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("drug", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides complete drug labeling information for acetaminophen, including detailed sections such as indications, dosage and administration, contraindications, warnings and precautions, adverse reactions, drug interactions, and other FDA-required labeling components.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='acetaminophen', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='label', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("complete", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates comprehensive labeling information rather than just basic drug facts, showing detailed regulatory and prescribing information typical of FDA drug labels.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_multiple_sclerosis_research_and_trials(agent: TestAgent):
    response = await agent.generate_str("I want to know about multiple sclerosis: current research and recruiting trials")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'multiple sclerosis'}))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'multiple sclerosis', 'status': 'recruiting'}))
    await agent.session.assert_that(Expect.tools.sequence(["pubmed_search", "clinical_trials_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("multiple sclerosis", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recruiting", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive information about multiple sclerosis including both current research findings from scientific literature and recruiting clinical trials. It should integrate research developments with available trial opportunities for patients.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='multiple sclerosis', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='multiple sclerosis', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='recruiting', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates integration of current scientific research and clinical trial opportunities, providing both educational content and actionable information for patients interested in multiple sclerosis research participation.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_antibiotic_resistance_studies(agent: TestAgent):
    response = await agent.generate_str("Find 15 recent studies on antibiotic resistance from the last 3 years")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'antibiotic resistance', 'max_results': 15, 'date_range': '3'}))
    await agent.session.assert_that(Expect.content.contains("antibiotic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("antibiotic resistance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("studies", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides exactly 15 recent studies on antibiotic resistance from the last 3 years. It should include study titles, publication information, and brief descriptions of findings related to antibiotic resistance research. The studies should be clearly from recent publications within the specified timeframe.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='antibiotic resistance', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response respects the specific request for exactly 15 studies and mentions or implies the 3-year timeframe constraint. The content should focus on recent research developments in antibiotic resistance.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("recent", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3 years", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_specific_icd10_code_f32(agent: TestAgent):
    response = await agent.generate_str("What is ICD-10 code F32?")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'code': 'F32'}))
    await agent.session.assert_that(Expect.judge.llm("Response explains what ICD-10 code F32 represents", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("F32", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides the meaning and description of ICD-10 code F32. It should explain what medical condition or diagnosis this code represents, including relevant clinical information about the condition (typically related to depressive episodes).", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='F32', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(6000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("depressive", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response correctly identifies F32 as relating to major depressive disorder or depressive episodes, providing accurate medical terminology information.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_obesity_health_topic(agent: TestAgent):
    response = await agent.generate_str("What are the health risks and management strategies for obesity?")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'obesity'}))
    await agent.session.assert_that(Expect.content.contains("obesity", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("Response covers health risks and management of obesity", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.content.contains("health risks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("management", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive information about obesity including health risks (such as diabetes, cardiovascular disease, sleep apnea) and management strategies (such as diet, exercise, behavioral changes, medical interventions). The information should be evidence-based and educational.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='obesity', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("strategies", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response covers both aspects requested: health risks associated with obesity and practical management/treatment strategies, providing a balanced and informative overview.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_chemotherapy_side_effects_research(agent: TestAgent):
    response = await agent.generate_str("Research chemotherapy side effects and management strategies")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'chemotherapy side effects management'}))
    await agent.session.assert_that(Expect.content.contains("chemotherapy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'chemotherapy side effects'}))
    await agent.session.assert_that(Expect.tools.sequence(["pubmed_search", "health_topics_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("side effects", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("management", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive research-based information about chemotherapy side effects and their management strategies. It should include common side effects (nausea, fatigue, hair loss, neuropathy) and evidence-based management approaches from both research literature and health guidelines.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='chemotherapy', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='chemotherapy', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.judge.llm("The response integrates research findings with practical management strategies, demonstrating synthesis of scientific literature and clinical guidelines for chemotherapy side effect management.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_parkinsons_not_recruiting_trials(agent: TestAgent):
    response = await agent.generate_str("Show me clinical trials for Parkinson\u0027s disease that are not currently recruiting")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': "Parkinson's disease", 'status': 'not_recruiting'}))
    await agent.session.assert_that(Expect.content.contains("Parkinson", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("not recruiting", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides clinical trials for Parkinson\u0027s disease that are specifically not currently recruiting participants. It should include trial details such as study titles, completion status, study phases, and reasons for not recruiting (completed, suspended, terminated, etc.).", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='Parkinson', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='not_recruiting', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response clearly distinguishes that these trials are not recruiting, avoiding confusion with active recruiting trials. It should emphasize the non-recruiting status.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_blood_pressure_medication_comparison(agent: TestAgent):
    response = await agent.generate_str("Compare amlodipine and losartan using FDA data")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=2))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'amlodipine'}))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'losartan'}))
    await agent.session.assert_that(Expect.judge.llm("Response compares amlodipine and losartan based on FDA information", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.content.contains("amlodipine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("losartan", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("compare", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("FDA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response compares amlodipine and losartan using FDA regulatory data. It should include key differences such as drug class (calcium channel blocker vs ARB), indications, dosing, contraindications, side effects, and other FDA-documented characteristics for both medications.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='amlodipine', field_path=None, match_type="contains", case_sensitive=False, call_index=0))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='losartan', field_path=None, match_type="contains", case_sensitive=False, call_index=1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates clear comparative analysis between the two blood pressure medications, highlighting key differences in mechanism of action, efficacy, and safety profiles rather than just listing separate drug information.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_diabetes_icd_codes_comprehensive(agent: TestAgent):
    response = await agent.generate_str("Find all ICD-10 codes related to diabetes, show maximum results")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'diabetes', 'max_results': 100}))
    await agent.session.assert_that(Expect.content.contains("diabetes", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("E", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive ICD-10 codes related to diabetes, showing maximum results (up to 100). It should include various diabetes-related codes from the E08-E13 series covering different types of diabetes (Type 1, Type 2, gestational, etc.) and their complications.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='diabetes', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("maximum", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response shows extensive diabetes-related ICD-10 codes, demonstrating comprehensive coverage of diabetes conditions and complications. It should show significantly more codes than a typical limited search.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("E10", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_alzheimers_comprehensive_research(agent: TestAgent):
    response = await agent.generate_str("I need comprehensive information about Alzheimer\u0027s disease: health information, recent research, and clinical trials")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': "Alzheimer's disease"}))
    await agent.session.assert_that(Expect.judge.llm("Response provides comprehensive information about Alzheimer\u0027s from multiple sources", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': "Alzheimer's disease"}))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': "Alzheimer's disease"}))
    await agent.session.assert_that(Expect.tools.sequence(["health_topics_search", "pubmed_search", "clinical_trials_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("Alzheimer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("health information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive information about Alzheimer\u0027s disease integrating health education content, recent research findings, and clinical trial opportunities. It should cover disease overview, symptoms, current treatments, latest research developments, and available trials.", min_score=0.9), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='Alzheimer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='Alzheimer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='Alzheimer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(15000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(5))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates successful integration of multiple information sources (health topics, research literature, clinical trials) to provide a truly comprehensive overview of Alzheimer\u0027s disease from multiple perspectives.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_vaccine_adverse_events(agent: TestAgent):
    response = await agent.generate_str("What adverse events have been reported for COVID-19 vaccines?")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'COVID-19 vaccine', 'search_type': 'adverse_events'}))
    await agent.session.assert_that(Expect.content.contains("adverse", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("COVID-19", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("vaccine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("adverse events", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides information about adverse events reported for COVID-19 vaccines. It should include specific adverse reactions documented in FDA databases, such as injection site reactions, fatigue, headache, myocarditis, or other reported events with appropriate context about frequency and severity.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='COVID-19', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='adverse', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.content.contains("reported", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides balanced information about COVID-19 vaccine adverse events, including context about the nature of vaccine safety monitoring and the distinction between reported events and confirmed causation.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_mental_health_spanish_resources(agent: TestAgent):
    response = await agent.generate_str("Necesito recursos sobre salud mental en espa\u00f1ol")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'salud mental', 'language': 'es'}))
    await agent.session.assert_that(Expect.content.contains("salud mental", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recursos", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides mental health resources in Spanish or acknowledges the Spanish language request. The content should be relevant to mental health education and resources, either in Spanish or explaining how Spanish-language mental health information was retrieved.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='salud mental', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("espa\u00f1ol", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response appropriately handles the Spanish language request for mental health resources, either by providing Spanish content, acknowledging the language preference, or explaining language capabilities for mental health information and resources.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_stroke_prevention_research(agent: TestAgent):
    response = await agent.generate_str("Find recent research on stroke prevention published in the last 2 years")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'stroke prevention', 'date_range': '2'}))
    await agent.session.assert_that(Expect.content.contains("stroke", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("prevention", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides recent research findings on stroke prevention from the last 2 years. It should include study titles, publication information, and key findings or developments in stroke prevention strategies from recent medical literature.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='stroke', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='prevention', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("recent", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response focuses on recent research and mentions or implies the 2-year timeframe constraint for the stroke prevention studies presented.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_statin_drug_labeling(agent: TestAgent):
    response = await agent.generate_str("Get the drug labeling information for simvastatin")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'simvastatin', 'search_type': 'label'}))
    await agent.session.assert_that(Expect.content.contains("simvastatin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("labeling", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("drug", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides drug labeling information for simvastatin, including detailed sections such as indications, dosage and administration, contraindications, warnings and precautions, adverse reactions, drug interactions, and other FDA-required labeling components for this statin medication.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='simvastatin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='label', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("statin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates comprehensive labeling information rather than just basic drug facts, showing detailed regulatory and prescribing information typical of FDA drug labels for simvastatin.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_rare_disease_trials(agent: TestAgent):
    response = await agent.generate_str("Find clinical trials for rare diseases, show 20 results")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'rare disease', 'max_results': 20}))
    await agent.session.assert_that(Expect.content.contains("rare", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'rare diseases', 'max_results': 20}))
    await agent.session.assert_that(Expect.content.contains("rare disease", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("20", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides 20 clinical trials specifically for rare diseases. It should include trial details such as study titles, conditions being studied, enrollment status, and trial phases. The trials should focus on various rare or orphan diseases.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='rare', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response respects the request for exactly 20 results and demonstrates coverage of multiple rare disease conditions rather than focusing on just one rare disease.", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.content.contains("results", case_sensitive=False), response=response)

@pytest.mark.asyncio
async def test_thyroid_disorder_icd_lookup(agent: TestAgent):
    response = await agent.generate_str("What ICD-10 codes are used for thyroid disorders?")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'thyroid disorder'}))
    await agent.session.assert_that(Expect.content.contains("thyroid", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'thyroid disorders'}))
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("E0", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides relevant ICD-10 codes for thyroid disorders. It should include codes from the E00-E07 series covering conditions like hypothyroidism, hyperthyroidism, goiter, thyroiditis, and other thyroid-related disorders with their descriptions.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='thyroid', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("disorders", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response shows multiple thyroid-related ICD-10 codes, demonstrating comprehensive coverage of various thyroid conditions rather than just a single code.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_anticoagulant_safety_profile(agent: TestAgent):
    response = await agent.generate_str("What\u0027s the complete safety profile of rivaroxaban including adverse events?")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'rivaroxaban', 'search_type': 'adverse_events'}))
    await agent.session.assert_that(Expect.judge.llm("Response discusses the safety profile and adverse events of rivaroxaban", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=2))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'rivaroxaban', 'search_type': 'label'}))
    await agent.session.assert_that(Expect.content.contains("rivaroxaban", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("safety", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("adverse events", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides a complete safety profile of rivaroxaban including adverse events from FDA data. It should cover bleeding risks, contraindications, warnings, common side effects, serious adverse reactions, and safety considerations specific to this anticoagulant medication.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='rivaroxaban', field_path=None, match_type="contains", case_sensitive=False, call_index=0))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='rivaroxaban', field_path=None, match_type="contains", case_sensitive=False, call_index=1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='adverse', field_path=None, match_type="contains", case_sensitive=False, call_index=0))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.content.contains("complete", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates comprehensive safety information by integrating both adverse events data and labeling information to provide a complete safety profile rather than partial information.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_pain_management_research_recent(agent: TestAgent):
    response = await agent.generate_str("Find the most recent research on chronic pain management from the last year, limit to 8 results")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'chronic pain management', 'max_results': 8, 'date_range': '1'}))
    await agent.session.assert_that(Expect.content.contains("pain", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("chronic pain", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("management", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("8", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides exactly 8 recent research studies on chronic pain management from the last year. It should include study titles, publication information, and key findings or developments in chronic pain management from recent medical literature.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='chronic pain', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='management', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("recent", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response focuses on the most recent research and mentions or implies the 1-year timeframe constraint. It should respect the limit of 8 results and emphasize the recency of the studies.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_epilepsy_treatment_trials(agent: TestAgent):
    response = await agent.generate_str("Show me all clinical trials for epilepsy treatment regardless of recruitment status")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'epilepsy', 'status': 'all'}))
    await agent.session.assert_that(Expect.content.contains("epilepsy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'epilepsy treatment', 'status': 'all'}))
    await agent.session.assert_that(Expect.content.contains("treatment", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides clinical trials for epilepsy treatment across all recruitment statuses (recruiting, not recruiting, completed, active). It should include trials with different status types and demonstrate that the search captured trials regardless of their current recruitment status.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='epilepsy', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("status", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response shows trials with various statuses (recruiting, completed, active, etc.) demonstrating that the \u0027all\u0027 status parameter was correctly applied to capture trials regardless of their current recruitment status.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_vitamin_d_deficiency_health_info(agent: TestAgent):
    response = await agent.generate_str("What health information is available about vitamin D deficiency?")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'vitamin D deficiency'}))
    await agent.session.assert_that(Expect.content.contains("vitamin D", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("deficiency", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("health", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive health information about vitamin D deficiency, including symptoms, causes, risk factors, health consequences, diagnosis, treatment, and prevention. The information should be evidence-based and educational.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='vitamin D', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='deficiency', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides informative content about vitamin D deficiency that would be useful for patient education and health awareness, covering key aspects of this nutritional deficiency condition.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_pneumonia_icd_code_lookup(agent: TestAgent):
    response = await agent.generate_str("Look up ICD-10 code J18.9")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'code': 'J18.9'}))
    await agent.session.assert_that(Expect.judge.llm("Response explains what ICD-10 code J18.9 represents", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("J18.9", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides the meaning and description of ICD-10 code J18.9. It should explain what medical condition this code represents, including relevant clinical information about the condition (typically pneumonia, unspecified organism).", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='J18.9', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(6000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("pneumonia", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response correctly identifies J18.9 as relating to pneumonia (unspecified organism), providing accurate medical terminology information for this respiratory condition code.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_antibiotic_amoxicillin_info(agent: TestAgent):
    response = await agent.generate_str("Get FDA information about amoxicillin")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'amoxicillin'}))
    await agent.session.assert_that(Expect.content.contains("amoxicillin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("FDA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides FDA information about amoxicillin, including regulatory details such as approval status, indications, dosage forms, manufacturer information, or other FDA-documented characteristics of this antibiotic medication.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='amoxicillin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("antibiotic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates that FDA-specific information was retrieved for amoxicillin, showing regulatory or approval-related details rather than just general drug information.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_kidney_disease_comprehensive_analysis(agent: TestAgent):
    response = await agent.generate_str("I need a complete analysis of chronic kidney disease: health info, ICD codes, recent research, and trials")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.judge.llm("Response provides comprehensive information about chronic kidney disease from multiple medical sources", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'chronic kidney disease'}))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'chronic kidney disease'}))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'chronic kidney disease'}))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'chronic kidney disease'}))
    await agent.session.assert_that(Expect.tools.sequence(["health_topics_search", "medical_terminology_lookup", "pubmed_search", "clinical_trials_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("chronic kidney disease", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides a complete analysis of chronic kidney disease integrating health information, ICD-10 codes, recent research findings, and clinical trials. It should cover disease overview, staging, symptoms, coding, latest research developments, and available trials comprehensively.", min_score=0.9), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='chronic kidney disease', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='chronic kidney disease', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='chronic kidney disease', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='chronic kidney disease', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(18000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(6))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates successful integration of multiple information sources (health education, medical coding, research literature, clinical trials) to provide a truly comprehensive analysis of chronic kidney disease from all requested perspectives.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_hormone_replacement_therapy_studies(agent: TestAgent):
    response = await agent.generate_str("Find studies on hormone replacement therapy safety from the last 10 years")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'hormone replacement therapy safety', 'date_range': '10'}))
    await agent.session.assert_that(Expect.content.contains("hormone", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("hormone replacement therapy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("safety", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("studies", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides studies on hormone replacement therapy safety from the last 10 years. It should include research findings, study titles, publication information, and safety-related outcomes or conclusions from recent medical literature on HRT.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='hormone replacement therapy', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='safety', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("10 years", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response focuses on studies from the last 10 years and mentions or implies this timeframe constraint. The content should emphasize safety aspects of hormone replacement therapy research.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_heart_failure_recruiting_trials(agent: TestAgent):
    response = await agent.generate_str("Find recruiting clinical trials for heart failure, limit to 15 results")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'heart failure', 'status': 'recruiting', 'max_results': 15}))
    await agent.session.assert_that(Expect.content.contains("heart failure", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recruiting", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides exactly 15 recruiting clinical trials for heart failure. It should include trial details such as study titles, enrollment status, trial phases, locations, and contact information. The trials should be actively recruiting participants.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='heart failure', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='recruiting', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response respects the limit of 15 results and focuses specifically on recruiting trials rather than completed or suspended trials. The content should emphasize current recruitment opportunities for heart failure patients.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_anxiety_disorder_spanish_info(agent: TestAgent):
    response = await agent.generate_str("Informaci\u00f3n sobre trastornos de ansiedad en espa\u00f1ol")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'trastornos de ansiedad', 'language': 'es'}))
    await agent.session.assert_that(Expect.content.contains("ansiedad", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trastornos", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides information about anxiety disorders in Spanish or acknowledges the Spanish language request. The content should be relevant to anxiety disorder education and either be in Spanish or explain how Spanish-language information was retrieved.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='ansiedad', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("espa\u00f1ol", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response appropriately handles the Spanish language request for anxiety disorder information, either by providing Spanish content, acknowledging the language preference, or explaining language capabilities for mental health information.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_cancer_screening_guidelines_research(agent: TestAgent):
    response = await agent.generate_str("Research current cancer screening guidelines and recommendations")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'cancer screening guidelines'}))
    await agent.session.assert_that(Expect.content.contains("screening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'cancer screening guidelines'}))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'cancer screening guidelines recommendations'}))
    await agent.session.assert_that(Expect.tools.sequence(["health_topics_search", "pubmed_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("cancer screening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("guidelines", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recommendations", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive research on current cancer screening guidelines and recommendations. It should include information from health authorities, professional organizations, evidence-based guidelines, and recent research on screening protocols for various cancer types.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='cancer screening', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='cancer screening', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='guidelines', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.judge.llm("The response integrates both evidence-based health information and current research literature to provide comprehensive coverage of cancer screening guidelines from multiple authoritative sources.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_arthritis_icd_codes_search(agent: TestAgent):
    response = await agent.generate_str("Find ICD-10 codes for different types of arthritis, show 25 results")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'arthritis', 'max_results': 25}))
    await agent.session.assert_that(Expect.content.contains("arthritis", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("25", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("M", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides 25 ICD-10 codes for different types of arthritis. It should include various arthritis conditions with their corresponding codes from the M00-M25 series (such as rheumatoid arthritis, osteoarthritis, psoriatic arthritis, etc.) and their descriptions.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='arthritis', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("results", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response shows 25 arthritis-related ICD-10 codes, demonstrating comprehensive coverage of different arthritis types and conditions. It should respect the request for exactly 25 results and show variety in arthritis classifications.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_blood_thinner_comparison_complete(agent: TestAgent):
    response = await agent.generate_str("Compare all aspects of warfarin vs apixaban including FDA data and research")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=2))
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'warfarin'}))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'apixaban'}))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'warfarin vs apixaban'}))
    await agent.session.assert_that(Expect.content.contains("warfarin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("apixaban", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("compare", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("FDA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides a comprehensive comparison of warfarin vs apixaban covering all aspects including mechanism of action, FDA approval data, dosing, monitoring requirements, efficacy, safety profiles, drug interactions, and recent research findings. It should integrate both regulatory and research information.", min_score=0.9), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='warfarin', field_path=None, match_type="contains", case_sensitive=False, call_index=0))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='apixaban', field_path=None, match_type="contains", case_sensitive=False, call_index=1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='warfarin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='apixaban', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(15000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(5))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates comprehensive comparison across multiple dimensions, integrating FDA regulatory data with research evidence to provide a thorough analysis of both anticoagulant medications.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_gastroenterology_health_topics(agent: TestAgent):
    response = await agent.generate_str("What health information is available about inflammatory bowel disease?")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'inflammatory bowel disease'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides health information about inflammatory bowel disease", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.content.contains("inflammatory bowel disease", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("health", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive health information about inflammatory bowel disease, including symptoms, causes, types (Crohn\u0027s disease, ulcerative colitis), diagnosis, treatment options, management strategies, and lifestyle considerations. The information should be evidence-based and educational.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='inflammatory bowel disease', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("IBD", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides informative content about inflammatory bowel disease that would be useful for patient education and health awareness, covering key aspects of this gastrointestinal condition.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_pediatric_vaccination_schedule(agent: TestAgent):
    response = await agent.generate_str("Find research on pediatric vaccination schedules and effectiveness")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'pediatric vaccination schedule effectiveness'}))
    await agent.session.assert_that(Expect.content.contains("vaccination", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pediatric", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("schedule", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("effectiveness", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides research findings on pediatric vaccination schedules and their effectiveness. It should include studies on vaccination timing, immunization protocols, vaccine efficacy in children, schedule adherence, and population health outcomes from recent medical literature.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='pediatric', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='vaccination', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response focuses on research evidence regarding pediatric vaccination schedules, demonstrating scientific findings about vaccine timing, effectiveness, and scheduling protocols for children.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_sleep_disorder_trials_active(agent: TestAgent):
    response = await agent.generate_str("Show me active clinical trials for sleep disorders")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'sleep disorder', 'status': 'active'}))
    await agent.session.assert_that(Expect.content.contains("sleep", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'sleep disorders', 'status': 'active'}))
    await agent.session.assert_that(Expect.content.contains("sleep disorders", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("active", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides active clinical trials for sleep disorders. It should include trial details such as study titles, enrollment status, trial phases, locations, and treatment focus. The trials should be currently active (ongoing but may include recruiting and non-recruiting active studies).", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='sleep disorders', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='active', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("trials", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response shows trials that are currently active, demonstrating that the \u0027active\u0027 status parameter was correctly applied to capture ongoing sleep disorder research studies.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_osteoporosis_bone_health_comprehensive(agent: TestAgent):
    response = await agent.generate_str("Comprehensive information about osteoporosis: health info, treatments, and current trials")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'osteoporosis'}))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'osteoporosis'}))
    await agent.session.assert_that(Expect.content.contains("osteoporosis", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'osteoporosis treatment'}))
    await agent.session.assert_that(Expect.tools.sequence(["health_topics_search", "pubmed_search", "clinical_trials_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("bone health", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("treatment", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive information about osteoporosis integrating health education, treatment options, and current clinical trials. It should cover disease overview, risk factors, prevention, treatments (medications, lifestyle), and available research opportunities.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='osteoporosis', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='osteoporosis', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='osteoporosis', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(15000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(5))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates successful integration of health information, treatment research, and clinical trial opportunities to provide a truly comprehensive view of osteoporosis management and research landscape.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_geriatric_medicine_research_trends(agent: TestAgent):
    response = await agent.generate_str("Find recent research trends in geriatric medicine from the last 3 years, show 12 results")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'geriatric medicine', 'max_results': 12, 'date_range': '3'}))
    await agent.session.assert_that(Expect.content.contains("geriatric", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'geriatric medicine research trends', 'max_results': 12, 'date_range': '3'}))
    await agent.session.assert_that(Expect.content.contains("geriatric medicine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trends", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("12", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides exactly 12 recent research studies on geriatric medicine trends from the last 3 years. It should include study titles, publication information, and key findings or emerging trends in elderly care, aging research, or geriatric healthcare from recent medical literature.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='geriatric', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='medicine', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("3 years", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response focuses on recent research from the last 3 years and respects the limit of 12 results. It should demonstrate emerging trends and developments in geriatric medicine rather than older research.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_diabetes_medication_metformin_complete(agent: TestAgent):
    response = await agent.generate_str("Complete information about metformin: FDA data, adverse events, and recent research")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=2))
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'metformin'}))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'metformin', 'search_type': 'adverse_events'}))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'metformin', 'search_type': 'general'}))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'metformin'}))
    await agent.session.assert_that(Expect.content.contains("metformin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("FDA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("adverse events", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides complete information about metformin integrating FDA regulatory data, adverse events reporting, and recent research findings. It should cover drug approval, indications, safety profile, side effects, and current research developments comprehensively.", min_score=0.9), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='metformin', field_path=None, match_type="contains", case_sensitive=False, call_index=0))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='metformin', field_path=None, match_type="contains", case_sensitive=False, call_index=1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='adverse', field_path=None, match_type="contains", case_sensitive=False, call_index=1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='metformin', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(15000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates comprehensive coverage by integrating multiple types of FDA information (general and adverse events) with research literature to provide complete metformin information from regulatory and scientific perspectives.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_respiratory_disease_icd_comprehensive(agent: TestAgent):
    response = await agent.generate_str("Find all ICD-10 codes for respiratory diseases, maximum results")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'respiratory disease', 'max_results': 100}))
    await agent.session.assert_that(Expect.content.contains("respiratory", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'respiratory diseases', 'max_results': 100}))
    await agent.session.assert_that(Expect.content.contains("diseases", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("J", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive ICD-10 codes for respiratory diseases, showing maximum results (up to 100). It should include various respiratory conditions from the J00-J99 series covering infections, inflammatory conditions, chronic diseases, and other respiratory disorders.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='respiratory', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("maximum", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response shows extensive respiratory disease-related ICD-10 codes, demonstrating comprehensive coverage of respiratory conditions. It should show significantly more codes than a typical limited search and cover various types of respiratory diseases.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_immunology_autoimmune_research(agent: TestAgent):
    response = await agent.generate_str("Search for recent immunology research on autoimmune diseases")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'autoimmune diseases immunology'}))
    await agent.session.assert_that(Expect.content.contains("autoimmune", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'immunology autoimmune diseases'}))
    await agent.session.assert_that(Expect.content.contains("immunology", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("diseases", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides recent immunology research findings on autoimmune diseases. It should include study titles, publication information, and key findings or developments in autoimmune disease research, immune system mechanisms, or therapeutic approaches from recent medical literature.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='immunology', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='autoimmune', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("recent", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response focuses on recent research developments in immunology and autoimmune diseases, demonstrating scientific findings about immune mechanisms, disease pathogenesis, or treatment approaches.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_maternal_health_spanish(agent: TestAgent):
    response = await agent.generate_str("Informaci\u00f3n sobre salud materna en espa\u00f1ol")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'salud materna', 'language': 'es'}))
    await agent.session.assert_that(Expect.content.contains("materna", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("salud materna", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides information about maternal health in Spanish or acknowledges the Spanish language request. The content should be relevant to maternal health education and either be in Spanish or explain how Spanish-language information was retrieved.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='materna', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("espa\u00f1ol", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response appropriately handles the Spanish language request for maternal health information, either by providing Spanish content, acknowledging the language preference, or explaining language capabilities for maternal health information.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_ophthalmology_glaucoma_trials(agent: TestAgent):
    response = await agent.generate_str("Find completed clinical trials for glaucoma treatment")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'glaucoma', 'status': 'completed'}))
    await agent.session.assert_that(Expect.content.contains("glaucoma", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'glaucoma treatment', 'status': 'completed'}))
    await agent.session.assert_that(Expect.content.contains("completed", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("treatment", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides completed clinical trials for glaucoma treatment. It should include trial details such as study titles, completion status, results if available, treatment approaches, and study outcomes. The trials should be clearly identified as completed.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='glaucoma', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='completed', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("trials", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response clearly distinguishes that these trials are completed, avoiding confusion with ongoing or recruiting trials. It should emphasize the completed status and potentially include results or findings.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_emergency_medicine_protocols_research(agent: TestAgent):
    response = await agent.generate_str("Research emergency medicine protocols and best practices from recent studies")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'emergency medicine protocols best practices'}))
    await agent.session.assert_that(Expect.content.contains("emergency", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("emergency medicine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("protocols", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("best practices", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides research findings on emergency medicine protocols and best practices from recent studies. It should include evidence-based protocols, treatment guidelines, procedural improvements, and best practice recommendations from emergency medicine literature.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='emergency medicine', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='protocols', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("recent", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates focus on recent research findings and emphasizes evidence-based protocols and best practices in emergency medicine, showing current developments in emergency care procedures.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_specific_icd_mental_health_f41(agent: TestAgent):
    response = await agent.generate_str("What does ICD-10 code F41 represent?")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'code': 'F41'}))
    await agent.session.assert_that(Expect.judge.llm("Response accurately explains what ICD-10 code F41 represents", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("F41", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides the meaning and description of ICD-10 code F41. It should explain what mental health condition this code represents, including relevant clinical information about the condition (typically anxiety disorders).", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='F41', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(6000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("anxiety", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response correctly identifies F41 as relating to anxiety disorders, providing accurate medical terminology information for this mental health condition code.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_probiotic_supplements_fda_data(agent: TestAgent):
    response = await agent.generate_str("Get FDA information about probiotic supplements")
    await agent.session.assert_that(Expect.tools.was_called("fda_drug_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'probiotic'}))
    await agent.session.assert_that(Expect.content.contains("probiotic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("fda_drug_lookup", {'drug_name': 'probiotic supplements'}))
    await agent.session.assert_that(Expect.content.contains("supplements", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("FDA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides FDA information about probiotic supplements, including regulatory status, classification (dietary supplements vs drugs), approval requirements, labeling guidelines, or safety considerations as regulated by the FDA.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="fda_drug_lookup", expected_output='probiotic', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates that FDA-specific regulatory information was retrieved for probiotic supplements, showing information about FDA oversight, classification, or regulatory requirements rather than just general health information.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_stroke_rehabilitation_research_recent(agent: TestAgent):
    response = await agent.generate_str("Find the most recent research on stroke rehabilitation from the past 6 months")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'stroke rehabilitation', 'date_range': '1'}))
    await agent.session.assert_that(Expect.content.contains("rehabilitation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'stroke rehabilitation'}))
    await agent.session.assert_that(Expect.content.contains("stroke", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recent", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides the most recent research findings on stroke rehabilitation from the past 6 months. It should include study titles, publication information, and key findings or developments in stroke rehabilitation techniques, therapies, or outcomes from very recent medical literature.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='stroke', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='rehabilitation', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("6 months", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response emphasizes the very recent timeframe (past 6 months) and focuses on the most current research developments in stroke rehabilitation rather than older studies.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_dermatology_skin_cancer_comprehensive(agent: TestAgent):
    response = await agent.generate_str("Comprehensive information about skin cancer: health information, research, and treatment trials")
    await agent.session.assert_that(Expect.tools.was_called("health_topics_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("health_topics_search", {'topic': 'skin cancer'}))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'skin cancer'}))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'skin cancer'}))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'skin cancer treatment'}))
    await agent.session.assert_that(Expect.tools.sequence(["health_topics_search", "pubmed_search", "clinical_trials_search"], allow_other_calls=True))
    await agent.session.assert_that(Expect.content.contains("skin cancer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("health information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("treatment", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides comprehensive information about skin cancer integrating health education, research findings, and treatment trials. It should cover disease overview, types of skin cancer, prevention, current research developments, and available clinical trials.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="health_topics_search", expected_output='skin cancer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='skin cancer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='skin cancer', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(15000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(5))
    await agent.session.assert_that(Expect.judge.llm("The response demonstrates successful integration of health education, research literature, and clinical trial opportunities to provide a truly comprehensive view of skin cancer from multiple medical perspectives.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_pediatric_cardiology_congenital_heart(agent: TestAgent):
    response = await agent.generate_str("Find clinical trials for congenital heart disease in children, show 25 results")
    await agent.session.assert_that(Expect.tools.was_called("clinical_trials_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'congenital heart disease', 'max_results': 25}))
    await agent.session.assert_that(Expect.content.contains("heart", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("clinical_trials_search", {'condition': 'congenital heart disease children', 'max_results': 25}))
    await agent.session.assert_that(Expect.content.contains("congenital heart disease", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("children", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("clinical trial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("25", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides exactly 25 clinical trials for congenital heart disease in children. It should include trial details such as study titles, enrollment criteria focusing on pediatric populations, trial phases, locations, and treatment approaches specific to congenital heart conditions.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='congenital heart disease', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="clinical_trials_search", expected_output='children', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("results", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response respects the limit of 25 results and focuses specifically on pediatric populations with congenital heart disease rather than general cardiac trials. The content should emphasize children\u0027s heart conditions and specialized pediatric cardiology trials.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_nutrition_dietary_supplements_research(agent: TestAgent):
    response = await agent.generate_str("Research the effectiveness of dietary supplements from studies in the last 5 years, limit to 20 results")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'dietary supplements effectiveness', 'max_results': 20, 'date_range': '5'}))
    await agent.session.assert_that(Expect.content.contains("supplement", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("dietary supplements", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("effectiveness", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("20", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides exactly 20 research studies on the effectiveness of dietary supplements from the last 5 years. It should include study titles, publication information, and key findings about supplement efficacy, safety, or health outcomes from recent nutrition and supplement research literature.", min_score=0.85), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='dietary supplements', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='effectiveness', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("5 years", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response focuses on recent research from the last 5 years and respects the limit of 20 results. It should emphasize effectiveness outcomes and evidence-based findings about dietary supplement benefits or limitations.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_endocrinology_hormone_disorders_icd(agent: TestAgent):
    response = await agent.generate_str("What ICD-10 codes are used for hormone disorders?")
    await agent.session.assert_that(Expect.tools.was_called("medical_terminology_lookup", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'hormone disorder'}))
    await agent.session.assert_that(Expect.content.contains("hormone", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.called_with("medical_terminology_lookup", {'description': 'hormone disorders'}))
    await agent.session.assert_that(Expect.content.contains("hormone disorders", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ICD-10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("E", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides relevant ICD-10 codes for hormone disorders. It should include codes from the E00-E89 series covering various endocrine conditions like diabetes, thyroid disorders, adrenal disorders, parathyroid disorders, and other hormonal imbalances with their descriptions.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="medical_terminology_lookup", expected_output='hormone', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("disorders", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response shows multiple hormone-related ICD-10 codes, demonstrating comprehensive coverage of various endocrine and hormonal disorders rather than just a single code.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_telemedicine_effectiveness_covid_era(agent: TestAgent):
    response = await agent.generate_str("Find research on telemedicine effectiveness during the COVID era")
    await agent.session.assert_that(Expect.tools.was_called("pubmed_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("pubmed_search", {'query': 'telemedicine effectiveness COVID'}))
    await agent.session.assert_that(Expect.content.contains("telemedicine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("effectiveness", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("COVID", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response provides research findings on telemedicine effectiveness during the COVID era. It should include study titles, publication information, and key findings about telemedicine adoption, outcomes, patient satisfaction, or healthcare delivery changes during the COVID-19 pandemic from medical literature.", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='telemedicine', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="pubmed_search", expected_output='COVID', field_path=None, match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.content.contains("pandemic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.judge.llm("The response focuses on research specifically related to telemedicine during the COVID era, demonstrating findings about healthcare delivery changes, digital health adoption, or remote care effectiveness during the pandemic period.", min_score=0.75), response=response)


