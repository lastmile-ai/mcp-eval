import pytest
import mcp_eval
from mcp_eval import Expect
from mcp_eval.session import TestAgent
from mcp_agent.agents.agent_spec import AgentSpec

# Pin tests to the intended server by configuring a suite-level AgentSpec.
# This avoids relying on whatever the current default agent is in mcpeval.yaml.
@mcp_eval.setup
def _configure_suite_agent():
    mcp_eval.use_agent(
        AgentSpec(
            name="generated-pytest",
            instruction="You are a helpful assistant that can use MCP servers effectively.",
            server_names=["nationalparks"],
        )
    )

@pytest.mark.asyncio
async def test_find_parks_by_state(agent: TestAgent):
    response = await agent.generate_str("Find national parks in California")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'stateCode': 'CA'}))
    await agent.session.assert_that(Expect.content.contains("California", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='CA', field_path='data[0].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide a clear list or description of national parks located in California. It should be informative and relevant to the user\u0027s request.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_search_parks_by_name(agent: TestAgent):
    response = await agent.generate_str("Search for parks with \u0027Yellowstone\u0027 in the name")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'Yellowstone'}))
    await agent.session.assert_that(Expect.content.contains("Yellowstone", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='Yellowstone', field_path='data[0].fullName', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='yell', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should successfully identify Yellowstone National Park and provide relevant information about it. The search should be accurate and the response should be informative.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_find_parks_with_activities(agent: TestAgent):
    response = await agent.generate_str("Find parks that offer hiking and camping activities")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'activities': 'hiking,camping'}))
    await agent.session.assert_that(Expect.content.contains("hiking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("camping", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='hiking', field_path='data[0].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='camping', field_path='data[0].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide a list of national parks that offer both hiking and camping activities. The information should be relevant and clearly indicate that these activities are available at the listed parks.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_limit_park_results(agent: TestAgent):
    response = await agent.generate_str("Show me only the top 5 parks in Texas")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'stateCode': 'TX', 'limit': 5}))
    await agent.session.assert_that(Expect.content.contains("Texas", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='TX', field_path='data[0].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output=5, field_path='data.length', match_type="less_than_or_equal", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("5", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("top", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should show exactly 5 or fewer parks from Texas. The response should acknowledge the limit requested and present the parks in a clear, organized manner.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_multiple_states_search(agent: TestAgent):
    response = await agent.generate_str("Find parks in California, Oregon, and Washington")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'stateCode': 'CA,OR,WA'}))
    await agent.session.assert_that(Expect.content.contains("California", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Oregon", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Washington", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='CA', field_path='data[*].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='OR', field_path='data[*].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='WA', field_path='data[*].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should include national parks from California, Oregon, and Washington states. It should not include parks from other states and should provide relevant information about the parks in these three western states.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_get_yosemite_details(agent: TestAgent):
    response = await agent.generate_str("Get detailed information about Yosemite National Park")
    await agent.session.assert_that(Expect.tools.was_called("getParkDetails", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getParkDetails", {'parkCode': 'yose'}))
    await agent.session.assert_that(Expect.content.contains("Yosemite", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("California", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getParkDetails", expected_output='Yosemite', field_path='data[0].fullName', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getParkDetails", expected_output='yose', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("detailed", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive detailed information specifically about Yosemite National Park, including location, features, activities, or other relevant park details. It should be focused solely on Yosemite and not mention other parks.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_get_grand_canyon_details(agent: TestAgent):
    response = await agent.generate_str("Tell me about Grand Canyon National Park")
    await agent.session.assert_that(Expect.tools.was_called("getParkDetails", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getParkDetails", {'parkCode': 'grca'}))
    await agent.session.assert_that(Expect.content.contains("Grand Canyon", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Arizona", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getParkDetails", expected_output='Grand Canyon', field_path='data[0].fullName', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getParkDetails", expected_output='grca', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getParkDetails", expected_output='AZ', field_path='data[0].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive information specifically about Grand Canyon National Park, including its location in Arizona, notable features like the canyon itself, and relevant details about the park. It should focus exclusively on Grand Canyon and not mention other parks.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_get_park_alerts(agent: TestAgent):
    response = await agent.generate_str("What are the current alerts for Yellowstone National Park?")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'parkCode': 'yell'}))
    await agent.session.assert_that(Expect.content.contains("Yellowstone", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='yell', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("current", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide current alerts specifically for Yellowstone National Park. It should include information about closures, hazards, or other important notifications. If no alerts exist, it should clearly state that. The response should be focused only on Yellowstone alerts.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_search_alerts_by_keyword(agent: TestAgent):
    response = await agent.generate_str("Are there any closure alerts at national parks?")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'closure'}))
    await agent.session.assert_that(Expect.content.contains("closure", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='closure', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about closure alerts at national parks. It should either list specific closure alerts or indicate if no closure alerts are currently active. The information should be relevant to park closures and provide useful details for visitors.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_limit_alerts_results(agent: TestAgent):
    response = await agent.generate_str("Show me the first 3 alerts for any park")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'limit': 3}))
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output=3, field_path='data.length', match_type="less_than_or_equal", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("first", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should show exactly 3 or fewer alerts from any national park. It should acknowledge the limit requested and present the alerts in a clear, organized manner. If fewer than 3 alerts exist, it should show all available alerts.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_get_visitor_centers(agent: TestAgent):
    response = await agent.generate_str("What visitor centers are available at Zion National Park?")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'parkCode': 'zion'}))
    await agent.session.assert_that(Expect.content.contains("Zion", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output='zion', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("operating hours", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("available", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about visitor centers specifically at Zion National Park, including their locations, operating hours, and services. It should focus exclusively on Zion and provide useful visitor information.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_search_visitor_centers_by_name(agent: TestAgent):
    response = await agent.generate_str("Find visitor centers with \u0027museum\u0027 in their description")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'q': 'museum'}))
    await agent.session.assert_that(Expect.content.contains("museum", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output='museum', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("description", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide visitor centers that have \u0027museum\u0027 in their name or description. It should be relevant to the search criteria and provide useful information about these museum-related visitor centers.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_get_campgrounds(agent: TestAgent):
    response = await agent.generate_str("What campgrounds are available at Great Smoky Mountains?")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'parkCode': 'grsm'}))
    await agent.session.assert_that(Expect.content.contains("Great Smoky Mountains", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='grsm', field_path='data[0].parkCode', match_type="equals", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("available", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("amenities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about campgrounds specifically at Great Smoky Mountains National Park, including their names, locations, and available amenities. It should focus exclusively on Great Smoky Mountains and provide useful camping information for visitors.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_search_campgrounds_by_amenity(agent: TestAgent):
    response = await agent.generate_str("Find campgrounds with shower facilities")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'shower'}))
    await agent.session.assert_that(Expect.content.contains("shower", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='shower', field_path='data[*].amenities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("facilities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide campgrounds that have shower facilities available. It should be relevant to the search criteria and include information about campgrounds with this specific amenity across various national parks.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_get_upcoming_events(agent: TestAgent):
    response = await agent.generate_str("What events are happening at Acadia National Park?")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'parkCode': 'acad'}))
    await agent.session.assert_that(Expect.content.contains("Acadia", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='acad', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("happening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("upcoming", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about upcoming events specifically at Acadia National Park. It should include event details such as dates, times, descriptions, or indicate if no events are currently scheduled. The response should focus exclusively on Acadia events.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_filter_events_by_date(agent: TestAgent):
    response = await agent.generate_str("Show me events happening between July 1st and July 31st, 2024")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'dateStart': '2024-07-01', 'dateEnd': '2024-07-31'}))
    await agent.session.assert_that(Expect.content.contains("July", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='2024-07', field_path='data[*].dateStart', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("happening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("between", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should show events that are happening specifically between July 1st and July 31st, 2024. It should filter events correctly by the specified date range and provide relevant event information within that timeframe.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_search_ranger_programs(agent: TestAgent):
    response = await agent.generate_str("Find ranger programs at any national park")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'ranger'}))
    await agent.session.assert_that(Expect.content.contains("ranger", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("program", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='ranger', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about ranger programs available at national parks. It should include details about ranger-led activities, educational programs, or guided tours offered by park rangers across various national parks.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_comprehensive_park_info(agent: TestAgent):
    response = await agent.generate_str("I want to visit Glacier National Park. Give me all the information including details, alerts, visitor centers, campgrounds, and events")
    await agent.session.assert_that(Expect.tools.was_called("getParkDetails", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getParkDetails", {'parkCode': 'glac'}))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'parkCode': 'glac'}))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'parkCode': 'glac'}))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'parkCode': 'glac'}))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'parkCode': 'glac'}))
    await agent.session.assert_that(Expect.content.contains("Glacier", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.sequence(["getParkDetails", "getAlerts", "getVisitorCenters", "getCampgrounds", "getEvents"], allow_other_calls=False))
    await agent.session.assert_that(Expect.performance.max_iterations(6))
    await agent.session.assert_that(Expect.performance.response_time_under(15000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive information about Glacier National Park including park details, current alerts, visitor centers, campgrounds, and events. It should be well-organized and cover all requested information types to help plan a visit.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_plan_west_coast_trip(agent: TestAgent):
    response = await agent.generate_str("I\u0027m planning a trip to the West Coast. Find parks in California and Oregon, then get details for Yosemite and Crater Lake")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getParkDetails", min_times=2))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'stateCode': 'CA,OR'}))
    await agent.session.assert_that(Expect.tools.called_with("getParkDetails", {'parkCode': 'yose'}))
    await agent.session.assert_that(Expect.tools.called_with("getParkDetails", {'parkCode': 'crla'}))
    await agent.session.assert_that(Expect.content.contains("California", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Oregon", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Yosemite", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Crater Lake", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("West Coast", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='CA', field_path='data[*].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='OR', field_path='data[*].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getParkDetails", expected_output='yose', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=0))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getParkDetails", expected_output='crla', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=1))
    await agent.session.assert_that(Expect.content.contains("trip", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.sequence(["findParks", "getParkDetails", "getParkDetails"], allow_other_calls=True))
    await agent.session.assert_that(Expect.performance.max_iterations(5))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should help plan a West Coast trip by first showing parks in California and Oregon, then providing detailed information about Yosemite and Crater Lake specifically. It should be organized and helpful for trip planning.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_emergency_alerts_check(agent: TestAgent):
    response = await agent.generate_str("Check for any emergency or hazard alerts across all parks")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'emergency'}))
    await agent.session.assert_that(Expect.content.contains("emergency", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("hazard", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='emergency', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("check", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("all parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide information about emergency or hazard alerts across national parks. It should prioritize safety information and present any urgent alerts clearly. If no emergency alerts are found, it should clearly state this.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_find_accessible_facilities(agent: TestAgent):
    response = await agent.generate_str("Find campgrounds with accessible facilities")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'accessible'}))
    await agent.session.assert_that(Expect.content.contains("accessible", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("facilities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='accessible', field_path='data[*].amenities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ADA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide campgrounds that have accessible facilities for visitors with disabilities. It should include information about ADA compliance, wheelchair accessibility, or other accommodations available at the campgrounds.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_winter_activities(agent: TestAgent):
    response = await agent.generate_str("Find parks that offer winter activities like skiing or snowshoeing")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'activities': 'skiing,snowshoeing'}))
    await agent.session.assert_that(Expect.content.contains("winter", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("skiing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("snowshoeing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='skiing', field_path='data[*].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='snowshoeing', field_path='data[*].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("activities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that offer winter activities like skiing or snowshoeing. It should focus on parks that have snow-based recreational opportunities and provide relevant information for winter visitors.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_pagination_example(agent: TestAgent):
    response = await agent.generate_str("Show me parks 11-20 from the list of all parks (skip the first 10)")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'start': 10, 'limit': 10}))
    await agent.session.assert_that(Expect.content.contains("11-20", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output=10, field_path='data.length', match_type="less_than_or_equal", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("skip", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("first 10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("show", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should demonstrate pagination by showing parks 11-20 from the complete list, skipping the first 10 parks. It should acknowledge the pagination request and present the results in the specified range.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_specific_event_search(agent: TestAgent):
    response = await agent.generate_str("Find astronomy events at parks in July 2024")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'astronomy', 'dateStart': '2024-07-01', 'dateEnd': '2024-07-31'}))
    await agent.session.assert_that(Expect.content.contains("astronomy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("July", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='astronomy', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='2024-07', field_path='data[*].dateStart', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stargazing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should find and present astronomy-related events specifically occurring in July 2024 at national parks. It should include events like stargazing programs, night sky tours, or astronomical observations during that specific time period.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_multiple_park_alerts(agent: TestAgent):
    response = await agent.generate_str("Check alerts for both Yosemite and Grand Canyon")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'parkCode': 'yose,grca'}))
    await agent.session.assert_that(Expect.content.contains("Yosemite", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Grand Canyon", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='yose', field_path='data[*].parkCode', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='grca', field_path='data[*].parkCode', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("both", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("check", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide alerts for both Yosemite and Grand Canyon National Parks. It should clearly distinguish between alerts from each park or present them in an organized manner that covers both parks as requested.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_family_friendly_search(agent: TestAgent):
    response = await agent.generate_str("Find parks suitable for families with children")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'family'}))
    await agent.session.assert_that(Expect.content.contains("family", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("children", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("suitable", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='family', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("kid", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(4))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that are suitable for families with children, highlighting features like easy trails, educational programs, visitor centers, and safe environments. It should focus on family-friendly activities and amenities.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_visitor_center_hours(agent: TestAgent):
    response = await agent.generate_str("What are the operating hours for visitor centers at Sequoia National Park?")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'parkCode': 'sequ'}))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'parkCode': 'seki'}))
    await agent.session.assert_that(Expect.content.contains("Sequoia", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("operating hours", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output='seki', field_path='data[0].parkCode', match_type="exact", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("hours", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("open", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide specific operating hours information for visitor centers at Sequoia National Park. It should include details about when the visitor centers are open, their schedules, and any seasonal variations in hours.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_rv_camping_search(agent: TestAgent):
    response = await agent.generate_str("Find campgrounds that accommodate RVs")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'RV'}))
    await agent.session.assert_that(Expect.content.contains("RV", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodate", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='RV', field_path='data[*].amenities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("recreational vehicle", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("hookup", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide campgrounds that specifically accommodate RVs, including information about RV sites, hookups, size limitations, and other RV-related amenities. It should focus on campgrounds suitable for recreational vehicles.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_educational_programs(agent: TestAgent):
    response = await agent.generate_str("Find educational programs for students at national parks")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'educational'}))
    await agent.session.assert_that(Expect.content.contains("educational", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("program", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("student", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='educational', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("learning", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("school", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide educational programs specifically designed for students at national parks. It should include information about school programs, field trips, curriculum-based activities, or other learning opportunities available across various national parks.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_desert_parks_search(agent: TestAgent):
    response = await agent.generate_str("Find national parks in desert regions")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'desert'}))
    await agent.session.assert_that(Expect.content.contains("desert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='desert', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("arid", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("region", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks located in desert regions, featuring arid landscapes, desert ecosystems, and characteristic desert features. It should focus on parks with desert environments rather than forested or wetland areas.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_weather_related_alerts(agent: TestAgent):
    response = await agent.generate_str("Are there any weather-related alerts at parks right now?")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'weather'}))
    await agent.session.assert_that(Expect.content.contains("weather", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='weather', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("right now", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("storm", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("snow", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("wind", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide current weather-related alerts at national parks, including information about storms, snow conditions, high winds, or other weather hazards. If no weather alerts exist, it should clearly state this.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_northeast_parks_comprehensive(agent: TestAgent):
    response = await agent.generate_str("Show me parks in New York and Vermont, then get campground info for any you find")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'stateCode': 'NY,VT'}))
    await agent.session.assert_that(Expect.judge.llm("Response includes both park search and campground information", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.content.contains("New York", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Vermont", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='NY', field_path='data[*].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='VT', field_path='data[*].states', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("northeast", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.sequence(["findParks", "getCampgrounds"], allow_other_calls=True))
    await agent.session.assert_that(Expect.performance.max_iterations(5))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should first show parks in New York and Vermont, then provide campground information for any parks found in those states. It should demonstrate a two-step process of finding parks and then getting their camping facilities.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_historical_sites_search(agent: TestAgent):
    response = await agent.generate_str("Find parks with historical significance")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'historical'}))
    await agent.session.assert_that(Expect.content.contains("historical", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("significance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='historical', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("history", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("heritage", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("monument", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that have historical significance, including sites with historical monuments, cultural heritage, battlefields, or other historically important features. It should focus on parks with educational and historical value.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_special_events_weekend(agent: TestAgent):
    response = await agent.generate_str("What special events are happening this weekend at any park?")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'special'}))
    await agent.session.assert_that(Expect.content.contains("special", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("weekend", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='special', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("happening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Saturday", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Sunday", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide special events happening during the weekend at national parks. It should focus on unique or special programs, festivals, or activities occurring on Saturday and Sunday, rather than regular daily activities.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_pet_friendly_facilities(agent: TestAgent):
    response = await agent.generate_str("Find campgrounds that allow pets")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'pet'}))
    await agent.session.assert_that(Expect.content.contains("pet", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("allow", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='pet', field_path='data[*].amenities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("dog", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("friendly", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("leash", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide campgrounds that allow pets, including information about pet policies, leash requirements, or pet-friendly amenities. It should focus on camping facilities where visitors can bring their dogs or other pets.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_island_parks_search(agent: TestAgent):
    response = await agent.generate_str("Are there any national parks on islands?")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'island'}))
    await agent.session.assert_that(Expect.content.contains("island", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='island', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("Hawaii", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Virgin Islands", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("archipelago", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("are there", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should identify national parks located on islands, such as those in Hawaii, Virgin Islands, or other island territories. It should answer the question about whether island-based national parks exist and provide examples if available.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_photography_opportunities(agent: TestAgent):
    response = await agent.generate_str("Find parks known for photography opportunities")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'photography'}))
    await agent.session.assert_that(Expect.content.contains("photography", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("opportunities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='photography', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("scenic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("landscape", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("viewpoint", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("photo", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that are known for excellent photography opportunities, including scenic landscapes, wildlife, unique geological features, or iconic viewpoints that make for compelling photographs.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_limited_visitor_centers(agent: TestAgent):
    response = await agent.generate_str("Show me just 2 visitor centers from any park")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'limit': 2}))
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output=2, field_path='data.length', match_type="less_than_or_equal", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("just", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("show", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("any park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should show exactly 2 or fewer visitor centers from any national park. It should acknowledge the limit requested and present the visitor centers in a clear, organized manner.", min_score=0.85), response=response)

@pytest.mark.asyncio
async def test_fire_restrictions_alerts(agent: TestAgent):
    response = await agent.generate_str("Check for fire restriction alerts at parks")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'fire'}))
    await agent.session.assert_that(Expect.content.contains("fire", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("restriction", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='fire', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("check", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campfire", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ban", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide information about fire restriction alerts at national parks, including campfire bans, fire danger levels, or other fire-related safety restrictions. If no fire restriction alerts exist, it should clearly state this.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_water_activities_parks(agent: TestAgent):
    response = await agent.generate_str("Find parks with water activities like boating or swimming")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'activities': 'boating,swimming'}))
    await agent.session.assert_that(Expect.content.contains("water", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("boating", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("swimming", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='boating', field_path='data[*].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='swimming', field_path='data[*].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("activities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("lake", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that offer water activities like boating and swimming. It should focus on parks with lakes, rivers, or coastal areas where these water-based recreational activities are available.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_scenic_drives_search(agent: TestAgent):
    response = await agent.generate_str("Find parks with scenic drives")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'scenic drive'}))
    await agent.session.assert_that(Expect.content.contains("scenic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("drive", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='scenic', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("road", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("driving", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("route", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that offer scenic drives, including information about beautiful roadways, driving routes, or auto tours within the parks that showcase scenic landscapes and natural beauty.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_volunteer_opportunities(agent: TestAgent):
    response = await agent.generate_str("Are there volunteer events at parks?")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'volunteer'}))
    await agent.session.assert_that(Expect.content.contains("volunteer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='volunteer', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("are there", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("opportunity", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("service", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("help", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide information about volunteer events or opportunities at national parks, including community service projects, conservation work, or other ways visitors can contribute to park maintenance and preservation.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_backcountry_camping(agent: TestAgent):
    response = await agent.generate_str("Find information about backcountry camping options")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'backcountry'}))
    await agent.session.assert_that(Expect.content.contains("backcountry", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("camping", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='backcountry', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("wilderness", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("permit", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("remote", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("options", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about backcountry camping options, including remote camping areas, wilderness camping, permit requirements, and primitive camping opportunities away from developed campgrounds.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_junior_ranger_programs(agent: TestAgent):
    response = await agent.generate_str("Find Junior Ranger programs at parks")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'junior ranger'}))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'Junior Ranger'}))
    await agent.session.assert_that(Expect.content.contains("Junior Ranger", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("program", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='Junior Ranger', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("kids", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("children", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("badge", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("activities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about Junior Ranger programs at national parks, including educational activities for children, badge-earning opportunities, and kid-friendly programs designed to engage young visitors with nature and park conservation.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_accessibility_alerts(agent: TestAgent):
    response = await agent.generate_str("Are there any alerts about accessibility at parks?")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'accessibility'}))
    await agent.session.assert_that(Expect.content.contains("accessibility", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='accessibility', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("are there", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ADA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("wheelchair", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("disability", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide information about accessibility-related alerts at national parks, including issues with wheelchair access, ADA compliance, or other accessibility concerns. If no accessibility alerts exist, it should clearly state this.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_coastal_parks_search(agent: TestAgent):
    response = await agent.generate_str("Find national parks along the coast")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'coast'}))
    await agent.session.assert_that(Expect.content.contains("coast", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='coast', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("ocean", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("beach", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("shoreline", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("along", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that are located along coastlines, featuring ocean access, beaches, shorelines, or coastal ecosystems. It should focus on parks with maritime or coastal characteristics rather than inland parks.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_interpretive_programs(agent: TestAgent):
    response = await agent.generate_str("What interpretive programs are available at visitor centers?")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'q': 'interpretive'}))
    await agent.session.assert_that(Expect.content.contains("interpretive", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("program", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output='interpretive', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("available", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("educational", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("exhibit", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("what", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about interpretive programs available at visitor centers, including educational exhibits, guided tours, presentations, or other interpretive services that help visitors understand the park\u0027s natural and cultural resources.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_seasonal_closures(agent: TestAgent):
    response = await agent.generate_str("Check for seasonal closure alerts")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'seasonal'}))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'seasonal closure'}))
    await agent.session.assert_that(Expect.content.contains("seasonal", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("closure", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='seasonal', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='closure', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("check", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("winter", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("summer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide information about seasonal closure alerts at national parks, including winter closures, road closures due to weather, or other temporary seasonal restrictions. If no seasonal closure alerts exist, it should clearly state this.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_cave_exploration_parks(agent: TestAgent):
    response = await agent.generate_str("Find parks with cave exploration opportunities")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'cave'}))
    await agent.session.assert_that(Expect.content.contains("cave", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("exploration", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='cave', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("underground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("limestone", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("spelunking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("opportunities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that offer cave exploration opportunities, including limestone caves, guided cave tours, spelunking activities, or underground formations that visitors can explore.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_campground_reservations(agent: TestAgent):
    response = await agent.generate_str("Find campgrounds that require reservations")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'reservation'}))
    await agent.session.assert_that(Expect.content.contains("reservation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("require", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='reservation', field_path='data[*].amenities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("booking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("advance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Recreation.gov", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide campgrounds that require advance reservations, including information about booking systems, reservation requirements, and how to make reservations rather than first-come, first-served campgrounds.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_wildlife_viewing_events(agent: TestAgent):
    response = await agent.generate_str("Find wildlife viewing events at parks")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'wildlife'}))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'wildlife viewing'}))
    await agent.session.assert_that(Expect.content.contains("wildlife", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("viewing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='wildlife', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("animal", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("nature", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("observation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide wildlife viewing events at national parks, including guided tours, animal watching programs, nature walks focused on wildlife observation, or other events designed to help visitors see and learn about native animals.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_mountain_parks_search(agent: TestAgent):
    response = await agent.generate_str("Find parks in mountainous regions")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'mountain'}))
    await agent.session.assert_that(Expect.content.contains("mountain", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("region", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='mountain', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("peak", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alpine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("elevation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("mountainous", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks located in mountainous regions, featuring mountain peaks, alpine environments, high elevations, and mountain-based ecosystems rather than flat or low-elevation areas.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_visitor_center_exhibits(agent: TestAgent):
    response = await agent.generate_str("What exhibits are available at park visitor centers?")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'q': 'exhibit'}))
    await agent.session.assert_that(Expect.content.contains("exhibit", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("available", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output='exhibit', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("display", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("museum", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("educational", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("what", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide information about exhibits available at park visitor centers, including educational displays, museum collections, interactive exhibits, or other informational presentations that help visitors learn about the park\u0027s natural and cultural resources.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_road_closure_alerts(agent: TestAgent):
    response = await agent.generate_str("Are there any road closures at parks I should know about?")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'road'}))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'road closure'}))
    await agent.session.assert_that(Expect.content.contains("road", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("closure", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='road', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='closure', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("are there", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("should know about", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("construction", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("maintenance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide information about road closure alerts at national parks, including construction, maintenance, weather-related closures, or other transportation disruptions that visitors should be aware of when planning their trips.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_fishing_opportunities(agent: TestAgent):
    response = await agent.generate_str("Find parks with good fishing opportunities")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'activities': 'fishing'}))
    await agent.session.assert_that(Expect.content.contains("fishing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("opportunities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='fishing', field_path='data[*].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("good", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("lake", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("river", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("angling", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that offer good fishing opportunities, including parks with lakes, rivers, streams, or coastal areas where fishing is permitted and popular. It should focus on parks known for their fishing experiences.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_guided_tour_events(agent: TestAgent):
    response = await agent.generate_str("Find guided tour events at parks")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'guided tour'}))
    await agent.session.assert_that(Expect.content.contains("guided", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("tour", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='guided', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ranger", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("walk", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("led", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide guided tour events at national parks, including ranger-led tours, nature walks, interpretive tours, or other guided experiences that help visitors explore and learn about the parks with expert guidance.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_group_camping_facilities(agent: TestAgent):
    response = await agent.generate_str("Find campgrounds with group camping facilities")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'group'}))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'group camping'}))
    await agent.session.assert_that(Expect.content.contains("group", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("camping", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='group', field_path='data[*].amenities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("facilities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("large", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("site", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("multiple", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide campgrounds that offer group camping facilities, including large sites that can accommodate multiple tents or RVs, group picnic areas, or other amenities designed for larger camping parties rather than individual campsites.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_stargazing_opportunities(agent: TestAgent):
    response = await agent.generate_str("Find parks good for stargazing")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'stargazing'}))
    await agent.session.assert_that(Expect.content.contains("stargazing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("good", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='stargazing', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("dark sky", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("astronomy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("night sky", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stars", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that are good for stargazing, including parks with dark skies, minimal light pollution, clear views of the night sky, or designated as Dark Sky Parks. It should focus on astronomical viewing opportunities.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_bookstore_visitor_centers(agent: TestAgent):
    response = await agent.generate_str("Which visitor centers have bookstores?")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'q': 'bookstore'}))
    await agent.session.assert_that(Expect.content.contains("bookstore", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("which", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output='bookstore', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("gift shop", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("books", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("publications", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("shop", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("have", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should identify visitor centers that have bookstores, gift shops, or retail areas where visitors can purchase books, publications, maps, or other park-related materials. It should provide specific information about which visitor centers offer these retail services.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_bear_safety_alerts(agent: TestAgent):
    response = await agent.generate_str("Check for bear-related safety alerts")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'bear'}))
    await agent.session.assert_that(Expect.content.contains("bear", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("safety", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='bear', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("check", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("wildlife", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("precaution", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("activity", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide bear-related safety alerts at national parks, including bear activity warnings, safety precautions, food storage requirements, or other bear safety information that visitors should be aware of.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_rock_climbing_parks(agent: TestAgent):
    response = await agent.generate_str("Find parks with rock climbing activities")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'activities': 'rock climbing'}))
    await agent.session.assert_that(Expect.content.contains("rock climbing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("activities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='rock climbing', field_path='data[*].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("climbing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cliff", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bouldering", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("granite", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that offer rock climbing activities, including parks with cliffs, rock faces, granite formations, or designated climbing areas where visitors can engage in rock climbing or bouldering.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_cultural_events_search(agent: TestAgent):
    response = await agent.generate_str("Find cultural events at national parks")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'cultural'}))
    await agent.session.assert_that(Expect.content.contains("cultural", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("national park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='cultural', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("heritage", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("history", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("tradition", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Native American", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide cultural events at national parks, including heritage celebrations, historical commemorations, Native American cultural programs, traditional crafts demonstrations, or other events that celebrate and preserve cultural heritage.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_primitive_camping_search(agent: TestAgent):
    response = await agent.generate_str("Find primitive camping options")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'primitive'}))
    await agent.session.assert_that(Expect.content.contains("primitive", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("camping", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("options", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='primitive', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("no hookups", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("basic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("undeveloped", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("dispersed", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide primitive camping options, including campgrounds with minimal amenities, no hookups, basic facilities, or dispersed camping areas that offer a more rustic camping experience away from developed facilities.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_volcanic_parks_search(agent: TestAgent):
    response = await agent.generate_str("Find parks with volcanic features")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'volcanic'}))
    await agent.session.assert_that(Expect.content.contains("volcanic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("features", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='volcanic', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("volcano", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("lava", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("crater", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("geothermal", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that feature volcanic characteristics, including active or dormant volcanoes, lava flows, volcanic craters, geothermal features, or other geological formations created by volcanic activity.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_amphitheater_programs(agent: TestAgent):
    response = await agent.generate_str("Find programs at park amphitheaters")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'amphitheater'}))
    await agent.session.assert_that(Expect.content.contains("amphitheater", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("program", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='amphitheater', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("evening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("presentation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campfire", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("outdoor", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide programs that take place at park amphitheaters, including evening programs, campfire talks, outdoor presentations, educational programs, or other events held at these outdoor venues within national parks.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_bike_trail_parks(agent: TestAgent):
    response = await agent.generate_str("Find parks with bike trails")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'activities': 'biking'}))
    await agent.session.assert_that(Expect.content.contains("bike", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trail", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='biking', field_path='data[*].activities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("biking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cycling", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bicycle", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("path", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that have bike trails or cycling opportunities, including designated bike paths, mountain biking trails, or areas where bicycles are permitted for recreational riding.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_gift_shop_visitor_centers(agent: TestAgent):
    response = await agent.generate_str("Which visitor centers have gift shops?")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'q': 'gift shop'}))
    await agent.session.assert_that(Expect.content.contains("gift shop", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("which", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output='gift shop', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("souvenir", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("retail", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("shop", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("merchandise", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("have", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should identify visitor centers that have gift shops, retail areas, or souvenir stores where visitors can purchase park-related merchandise, souvenirs, or other items. It should provide specific information about which visitor centers offer these retail services.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_trail_maintenance_alerts(agent: TestAgent):
    response = await agent.generate_str("Check for trail maintenance alerts")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'trail maintenance'}))
    await agent.session.assert_that(Expect.content.contains("trail", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("maintenance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='trail', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='maintenance', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("check", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("repair", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("work", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("closure", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide trail maintenance alerts at national parks, including information about trail repairs, closures for maintenance work, or other trail-related maintenance activities that might affect visitors\u0027 hiking plans.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_fossil_parks_search(agent: TestAgent):
    response = await agent.generate_str("Find parks where I can see fossils")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'fossil'}))
    await agent.session.assert_that(Expect.content.contains("fossil", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("see", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='fossil', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("paleontology", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("dinosaur", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("prehistoric", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("geology", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks where visitors can see fossils, including parks with paleontological sites, dinosaur fossils, prehistoric remains, or fossil exhibits. It should focus on parks known for their fossil discoveries or displays.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_evening_programs(agent: TestAgent):
    response = await agent.generate_str("Find evening programs at parks")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'evening'}))
    await agent.session.assert_that(Expect.content.contains("evening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("program", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='evening', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("night", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campfire", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("sunset", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ranger", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide evening programs at national parks, including campfire programs, sunset tours, night sky programs, ranger-led evening talks, or other activities that take place in the evening hours at parks.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_equestrian_camping(agent: TestAgent):
    response = await agent.generate_str("Find campgrounds that allow horses")
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'equestrian'}))
    await agent.session.assert_that(Expect.tools.called_with("getCampgrounds", {'q': 'horse'}))
    await agent.session.assert_that(Expect.content.contains("horse", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("campground", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("allow", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getCampgrounds", expected_output='horse', field_path='data[*].amenities', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("equestrian", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stable", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("corral", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("riding", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide campgrounds that allow horses, including equestrian camping facilities with horse corrals, stables, or other amenities for visitors traveling with horses. It should focus on horse-friendly camping options.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_glacier_parks_search(agent: TestAgent):
    response = await agent.generate_str("Find parks with glaciers")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'glacier'}))
    await agent.session.assert_that(Expect.content.contains("glacier", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='glacier', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("ice", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alpine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("snow", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("mountain", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that feature glaciers, including active glaciers, glacial landscapes, ice fields, or parks known for their glacial features and ice formations in alpine or arctic environments.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_theater_visitor_centers(agent: TestAgent):
    response = await agent.generate_str("Which visitor centers have theaters for presentations?")
    await agent.session.assert_that(Expect.tools.was_called("getVisitorCenters", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getVisitorCenters", {'q': 'theater'}))
    await agent.session.assert_that(Expect.content.contains("theater", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visitor center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("presentation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getVisitorCenters", expected_output='theater', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("which", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("auditorium", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("film", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("movie", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("screening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("have", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should identify visitor centers that have theaters, auditoriums, or presentation facilities where films, documentaries, or educational presentations about the parks are shown to visitors.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_construction_alerts(agent: TestAgent):
    response = await agent.generate_str("Are there any construction-related alerts at parks?")
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getAlerts", {'q': 'construction'}))
    await agent.session.assert_that(Expect.content.contains("construction", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getAlerts", expected_output='construction', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("are there", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("work", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("delay", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("detour", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("project", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should search for and provide information about construction-related alerts at national parks, including road work, facility construction, detours, delays, or other construction projects that might affect visitors\u0027 experiences.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_waterfalls_parks_search(agent: TestAgent):
    response = await agent.generate_str("Find parks with beautiful waterfalls")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'q': 'waterfall'}))
    await agent.session.assert_that(Expect.content.contains("waterfall", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("beautiful", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="findParks", expected_output='waterfall', field_path='data[*].description', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("falls", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cascade", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("water", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("scenic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide national parks that feature beautiful waterfalls, including parks with spectacular cascades, falls, or water features that are scenic attractions for visitors to enjoy and photograph.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_campfire_programs(agent: TestAgent):
    response = await agent.generate_str("Find campfire programs at parks")
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'q': 'campfire'}))
    await agent.session.assert_that(Expect.content.contains("campfire", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("program", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parks", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="getEvents", expected_output='campfire', field_path='data[*].title', match_type="contains", case_sensitive=False, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("evening", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ranger", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("story", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("amphitheater", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("find", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide campfire programs at national parks, including ranger-led evening programs around campfires, storytelling sessions, educational talks, or other campfire-based activities that bring visitors together for shared experiences.", min_score=0.8), response=response)



@pytest.mark.asyncio
async def test_comprehensive_trip_planning(agent: TestAgent):
    response = await agent.generate_str("I\u0027m planning a week-long trip to Utah. Find parks there, get details for Zion, check alerts, find campgrounds, and see what events are happening in August 2024")
    await agent.session.assert_that(Expect.tools.was_called("findParks", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getParkDetails", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getAlerts", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getCampgrounds", min_times=1))
    await agent.session.assert_that(Expect.tools.was_called("getEvents", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("findParks", {'stateCode': 'UT'}))
    await agent.session.assert_that(Expect.tools.called_with("getParkDetails", {'parkCode': 'zion'}))
    await agent.session.assert_that(Expect.tools.called_with("getEvents", {'dateStart': '2024-08-01', 'dateEnd': '2024-08-31'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides comprehensive trip planning information for Utah parks", min_score=0.8), response=response)


