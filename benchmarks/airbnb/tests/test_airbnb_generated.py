import pytest
import mcp_eval
from mcp_eval import Expect
from mcp_eval.session import TestAgent
from mcp_agent.agents.agent_spec import AgentSpec

# Pin tests to the intended server by configuring a suite-level AgentSpec.
# This avoids relying on whatever the current default agent is in mcpeval.yaml.
@mcp_eval.setup
def _configure_suite_agent():
    mcp_eval.use_agent(
        AgentSpec(
            name="generated-pytest",
            instruction="You are a helpful assistant that can use MCP servers effectively.",
            server_names=["airbnb"],
        )
    )

@pytest.mark.asyncio
async def test_basic_location_search(agent: TestAgent):
    response = await agent.generate_str("Find me Airbnb listings in San Francisco")
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'San Francisco'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("San Francisco", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("listing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings for San Francisco with relevant details like titles, prices, and links. The information should be well-formatted and helpful for someone looking to book accommodation.", min_score=0.7), response=response)

@pytest.mark.asyncio
async def test_search_with_dates(agent: TestAgent):
    response = await agent.generate_str("Search for Airbnb rentals in Paris from March 15, 2024 to March 20, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Paris', 'checkin': '2024-03-15', 'checkout': '2024-03-20'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides Airbnb listings for the specified dates in Paris", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Paris", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("March 15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("March 20", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings for Paris with the specified dates (March 15-20, 2024). It should include relevant details like property names, prices for the stay duration, and booking links. The dates should be clearly referenced in the response.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_search_with_guests(agent: TestAgent):
    response = await agent.generate_str("Find Airbnb places in Tokyo for 2 adults and 1 child")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Tokyo', 'adults': 2, 'children': 1}))
    await agent.session.assert_that(Expect.content.contains("Tokyo", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 child", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("guest", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings for Tokyo that accommodate 2 adults and 1 child. It should mention the guest count and show properties suitable for families. The listings should include relevant details like capacity, prices, and booking links.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_search_with_price_range(agent: TestAgent):
    response = await agent.generate_str("Search for Airbnb listings in New York City between $100-300 per night")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'New York City', 'minPrice': 100, 'maxPrice': 300}))
    await agent.session.assert_that(Expect.content.contains("New York", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("$100", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$300", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("price", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("night", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings for New York City within the specified price range of $100-300 per night. It should clearly show price filtering was applied and display properties with pricing information that falls within this range.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_family_vacation_search(agent: TestAgent):
    response = await agent.generate_str("I need a place in Miami Beach for my family: 2 adults, 2 children, and 1 infant for July 4-11, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Miami Beach', 'checkin': '2024-07-04', 'checkout': '2024-07-11', 'adults': 2, 'children': 2, 'infants': 1}))
    await agent.session.assert_that(Expect.judge.llm("Response shows family-friendly accommodations in Miami Beach", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Miami Beach", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("July 4", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("July 11", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 children", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 infant", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("family", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings for Miami Beach that accommodate a family of 2 adults, 2 children, and 1 infant for July 4-11, 2024. It should mention family-friendly features and show properties suitable for the specified group size and dates.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_pet_friendly_search(agent: TestAgent):
    response = await agent.generate_str("Find pet-friendly Airbnb rentals in Austin for me and my 2 dogs")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Austin', 'adults': 1, 'pets': 2}))
    await agent.session.assert_that(Expect.content.contains("Austin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Austin', 'pets': 2}))
    await agent.session.assert_that(Expect.content.contains("pet", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("dog", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("friendly", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide pet-friendly Airbnb listings in Austin that accommodate 2 dogs. It should mention pet policies, highlight pet-friendly features, and show properties that allow pets. The listings should be suitable for someone traveling with dogs.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_get_listing_details(agent: TestAgent):
    response = await agent.generate_str("Show me details for Airbnb listing ID 12345678")
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': '12345678'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides detailed information about the specific listing", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.content.contains("12345678", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("detail", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("listing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide detailed information about the specific Airbnb listing with ID 12345678. It should include comprehensive details like description, amenities, pricing, location, host information, and booking link. The response should be focused on this single listing rather than search results.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_listing_details_with_dates(agent: TestAgent):
    response = await agent.generate_str("Get details for listing 87654321 for a stay from June 1-7, 2024 with 3 adults")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': '87654321', 'checkin': '2024-06-01', 'checkout': '2024-06-07', 'adults': 3}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("87654321", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("June 1", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("June 7", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("detail", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide detailed information for listing 87654321 with specific dates (June 1-7, 2024) and guest count (3 adults). It should include pricing for those dates, availability confirmation, and comprehensive listing details tailored to the specified stay parameters.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_budget_conscious_search(agent: TestAgent):
    response = await agent.generate_str("Find cheap Airbnb options in Barcelona under $80 per night")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Barcelona', 'maxPrice': 80}))
    await agent.session.assert_that(Expect.content.contains("Barcelona", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("$80", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cheap", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("under", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("night", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("budget", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide budget-friendly Airbnb listings in Barcelona under $80 per night. It should emphasize affordability and show properties with pricing below the specified threshold. The listings should be clearly presented as budget options.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_luxury_search(agent: TestAgent):
    response = await agent.generate_str("Search for premium Airbnb listings in Los Angeles above $500 per night")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Los Angeles', 'minPrice': 500}))
    await agent.session.assert_that(Expect.judge.llm("Response shows high-end listings in Los Angeles", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Los Angeles", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$500", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("premium", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("above", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("luxury", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("night", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide high-end, luxury Airbnb listings in Los Angeles priced above $500 per night. It should emphasize premium features, upscale amenities, and luxury accommodations. The listings should clearly be positioned as luxury options with appropriate pricing.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_weekend_getaway(agent: TestAgent):
    response = await agent.generate_str("Find a romantic Airbnb in Napa Valley for 2 adults from Friday Sept 15 to Sunday Sept 17, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Napa Valley', 'checkin': '2024-09-15', 'checkout': '2024-09-17', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("Napa", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Napa Valley", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("September 15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("September 17", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("romantic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("weekend", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide romantic Airbnb listings in Napa Valley for 2 adults during a weekend getaway (September 15-17, 2024). It should emphasize romantic features, wine country ambiance, and couples-friendly amenities suitable for a romantic weekend retreat.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_international_trip(agent: TestAgent):
    response = await agent.generate_str("I\u0027m planning a trip to London and need accommodation for 4 adults from August 10-20, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'London', 'checkin': '2024-08-10', 'checkout': '2024-08-20', 'adults': 4}))
    await agent.session.assert_that(Expect.content.contains("London", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("August 10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("August 20", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("4 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trip", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("10 nights", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in London for 4 adults during a 10-night stay (August 10-20, 2024). It should show properties suitable for larger groups and mention the international travel context. The listings should accommodate the extended stay duration.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_large_group_search(agent: TestAgent):
    response = await agent.generate_str("Find Airbnb for our group trip to Las Vegas - 6 adults and 2 children")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Las Vegas', 'adults': 6, 'children': 2}))
    await agent.session.assert_that(Expect.judge.llm("Response provides suitable large group accommodations in Las Vegas", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Las Vegas", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("6 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 children", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("group", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("large", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("8", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodat", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in Las Vegas suitable for a large group of 6 adults and 2 children (8 people total). It should emphasize group-friendly features, spacious accommodations, and properties that can handle larger parties. The listings should be appropriate for group travel.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_specific_neighborhood(agent: TestAgent):
    response = await agent.generate_str("Search for Airbnb in Manhattan, New York City for one person")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Manhattan, New York City', 'adults': 1}))
    await agent.session.assert_that(Expect.content.contains("Manhattan", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("New York", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 adult", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("one person", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("solo", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("NYC", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings specifically in Manhattan, New York City for a solo traveler (1 adult). It should emphasize the specific neighborhood location and show properties suitable for single occupancy. The listings should be relevant to Manhattan\u0027s geography.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_multi_pet_family(agent: TestAgent):
    response = await agent.generate_str("Find accommodation in Seattle for a family of 3 adults, 1 child, 1 infant, and 3 pets")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Seattle', 'adults': 3, 'children': 1, 'infants': 1, 'pets': 3}))
    await agent.session.assert_that(Expect.content.contains("Seattle", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("3 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 child", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 infant", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3 pets", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("family", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pet", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in Seattle for a large family group with multiple pets (3 adults, 1 child, 1 infant, 3 pets). It should emphasize pet-friendly accommodations that can handle multiple animals and show properties suitable for families with young children including infants.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_holiday_booking(agent: TestAgent):
    response = await agent.generate_str("Search for Christmas vacation rentals in Aspen from Dec 23-30, 2024, budget $200-800/night")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Aspen', 'checkin': '2024-12-23', 'checkout': '2024-12-30', 'minPrice': 200, 'maxPrice': 800}))
    await agent.session.assert_that(Expect.content.contains("Aspen", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("December 23", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("December 30", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Christmas", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$200", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$800", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("vacation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("holiday", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Christmas vacation rental listings in Aspen for December 23-30, 2024, within the $200-800 per night budget range. It should emphasize the holiday timing and show properties suitable for a Christmas ski vacation with pricing information.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_business_trip(agent: TestAgent):
    response = await agent.generate_str("Need a place in Chicago for a 3-day business trip, just for myself")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Chicago', 'adults': 1}))
    await agent.session.assert_that(Expect.judge.llm("Response shows business-suitable accommodations in Chicago", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Chicago", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("business", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3-day", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("myself", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 adult", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("solo", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trip", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in Chicago suitable for a solo business traveler on a 3-day trip. It should emphasize business-friendly features like WiFi, workspace, and convenient location. The listings should be appropriate for single occupancy and short-term stays.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_beach_vacation(agent: TestAgent):
    response = await agent.generate_str("Find beachfront Airbnb rentals in Malibu for 2 adults from May 1-8, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Malibu', 'checkin': '2024-05-01', 'checkout': '2024-05-08', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("Malibu", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("May 1", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("May 8", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("beachfront", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("beach", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("ocean", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("vacation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide beachfront Airbnb listings in Malibu for 2 adults from May 1-8, 2024. It should emphasize oceanfront location, beach access, and vacation amenities. The listings should highlight coastal features and be suitable for a beach vacation.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_college_reunion(agent: TestAgent):
    response = await agent.generate_str("Looking for Airbnb in Boston for our college reunion - 8 adults, no specific dates yet")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Boston', 'adults': 8}))
    await agent.session.assert_that(Expect.content.contains("Boston", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("8 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("college", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("reunion", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("group", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("large", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in Boston suitable for a large group of 8 adults for a college reunion. It should emphasize group-friendly accommodations and social spaces. Since no specific dates are mentioned, it should focus on capacity and group amenities rather than availability.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_ski_trip(agent: TestAgent):
    response = await agent.generate_str("Find ski-accessible Airbnb in Park City, Utah for 4 adults from Jan 15-22, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Park City, Utah', 'checkin': '2024-01-15', 'checkout': '2024-01-22', 'adults': 4}))
    await agent.session.assert_that(Expect.content.contains("Park City", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Utah", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("January 15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("January 22", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ski", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("4 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("slope", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("mountain", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide ski-accessible Airbnb listings in Park City, Utah for 4 adults from January 15-22, 2024. It should emphasize ski access, mountain location, and winter sports amenities. The listings should be suitable for a ski vacation group.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_music_festival(agent: TestAgent):
    response = await agent.generate_str("Need accommodation in Austin during SXSW for 3 adults, March 8-17, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Austin', 'checkin': '2024-03-08', 'checkout': '2024-03-17', 'adults': 3}))
    await agent.session.assert_that(Expect.judge.llm("Response provides Austin accommodations for the festival period", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Austin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("March 8", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("March 17", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("SXSW", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("festival", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("music", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in Austin for 3 adults during SXSW (March 8-17, 2024). It should acknowledge the music festival context and potentially mention high demand, proximity to venues, or festival-related considerations. The listings should be suitable for the extended stay during the event.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_wine_country(agent: TestAgent):
    response = await agent.generate_str("Search for romantic getaway options in Sonoma County under $400/night for 2 people")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Sonoma County', 'adults': 2, 'maxPrice': 400}))
    await agent.session.assert_that(Expect.content.contains("Sonoma", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Sonoma County", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("romantic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("getaway", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$400", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 people", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("wine", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("vineyard", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("couples", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide romantic Airbnb listings in Sonoma County under $400 per night for 2 people. It should emphasize romantic features, wine country ambiance, vineyard proximity, and couples-friendly amenities suitable for a romantic getaway in wine country.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_national_park_visit(agent: TestAgent):
    response = await agent.generate_str("Find Airbnb near Yellowstone National Park for family of 4 (2 adults, 2 kids)")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Yellowstone National Park', 'adults': 2, 'children': 2}))
    await agent.session.assert_that(Expect.content.contains("Yellowstone", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("National Park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("family", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 kids", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("near", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("nature", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings near Yellowstone National Park suitable for a family of 4 (2 adults, 2 children). It should emphasize proximity to the park, family-friendly features, and outdoor/nature activities. The listings should accommodate the family size appropriately.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_wedding_accommodation(agent: TestAgent):
    response = await agent.generate_str("Need places in Savannah, Georgia for wedding guests - looking for options for 2 adults")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Savannah, Georgia', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("Savannah", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Georgia", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("wedding", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("guests", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("options", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("places", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb accommodation options in Savannah, Georgia suitable for wedding guests (2 adults). It should acknowledge the wedding context and show properties that would be appropriate for out-of-town guests attending a wedding celebration.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_food_tour_trip(agent: TestAgent):
    response = await agent.generate_str("Planning a food tour in New Orleans for 2 people, need accommodation April 20-25, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'New Orleans', 'checkin': '2024-04-20', 'checkout': '2024-04-25', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("New Orleans", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("April 20", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("April 25", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("food", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 people", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("tour", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("culinary", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in New Orleans for 2 people from April 20-25, 2024, with consideration for a food tour trip. It should mention proximity to restaurants, food districts, or culinary attractions. The listings should be suitable for food enthusiasts exploring the city\u0027s cuisine.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_art_gallery_weekend(agent: TestAgent):
    response = await agent.generate_str("Find trendy Airbnb in Brooklyn, New York for an art lover, solo traveler")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Brooklyn, New York', 'adults': 1}))
    await agent.session.assert_that(Expect.content.contains("Brooklyn", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("New York", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trendy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("art", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("solo", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 adult", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("gallery", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("creative", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide trendy Airbnb listings in Brooklyn, New York suitable for a solo art lover. It should emphasize artistic neighborhoods, proximity to galleries, creative spaces, and trendy areas. The listings should be appropriate for single occupancy and appeal to art enthusiasts.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_mountain_retreat(agent: TestAgent):
    response = await agent.generate_str("Search for cabin rentals in Asheville, North Carolina for 6 adults, budget minded under $250/night")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Asheville, North Carolina', 'adults': 6, 'maxPrice': 250}))
    await agent.session.assert_that(Expect.content.contains("Asheville", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("North Carolina", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cabin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("6 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$250", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("budget", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("mountain", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("retreat", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("rental", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide cabin rental listings in Asheville, North Carolina for 6 adults under $250 per night. It should emphasize mountain retreat features, cabin accommodations, and budget-friendly options. The listings should accommodate the large group size within the specified price range.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_tech_conference(agent: TestAgent):
    response = await agent.generate_str("Need accommodation in San Francisco for tech conference, single occupancy, Oct 15-18, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'San Francisco', 'checkin': '2024-10-15', 'checkout': '2024-10-18', 'adults': 1}))
    await agent.session.assert_that(Expect.content.contains("San Francisco", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("October 15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("October 18", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("tech", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("conference", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("single", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("business", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb accommodations in San Francisco for single occupancy during October 15-18, 2024, suitable for a tech conference attendee. It should emphasize business-friendly features like WiFi, workspace, and convenient location for conference activities.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_anniversary_celebration(agent: TestAgent):
    response = await agent.generate_str("Looking for special Airbnb in San Diego for our anniversary, 2 adults, over $300/night for luxury")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'San Diego', 'adults': 2, 'minPrice': 300}))
    await agent.session.assert_that(Expect.judge.llm("Response shows luxury accommodations suitable for anniversary in San Diego", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("San Diego", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("anniversary", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("special", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$300", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("luxury", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("romantic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("celebration", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide luxury Airbnb listings in San Diego over $300 per night for 2 adults celebrating an anniversary. It should emphasize romantic features, special amenities, and luxury accommodations suitable for a couple\u0027s anniversary celebration.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_college_visit(agent: TestAgent):
    response = await agent.generate_str("Find accommodation in Cambridge, Massachusetts for college visit with teenager - 2 adults, 1 child")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Cambridge, Massachusetts', 'adults': 2, 'children': 1}))
    await agent.session.assert_that(Expect.content.contains("Cambridge", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Massachusetts", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("college", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("visit", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 child", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("teenager", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Harvard", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb accommodations in Cambridge, Massachusetts for a family (2 adults, 1 child/teenager) visiting colleges. It should mention proximity to universities like Harvard or MIT and be suitable for families on college tours.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_desert_escape(agent: TestAgent):
    response = await agent.generate_str("Search for unique stays in Sedona, Arizona for spiritual retreat, 1 person, Feb 10-17, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Sedona, Arizona', 'checkin': '2024-02-10', 'checkout': '2024-02-17', 'adults': 1}))
    await agent.session.assert_that(Expect.content.contains("Sedona", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Arizona", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("February 10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("February 17", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("spiritual", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("retreat", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 person", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("unique", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("desert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("red rock", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide unique Airbnb stays in Sedona, Arizona for a solo spiritual retreat from February 10-17, 2024. It should emphasize spiritual elements, desert landscape, red rocks, and unique accommodations suitable for meditation or wellness activities.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_fishing_trip(agent: TestAgent):
    response = await agent.generate_str("Find waterfront Airbnb in Key West, Florida for fishing trip - 4 guys, July 1-7, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Key West, Florida', 'checkin': '2024-07-01', 'checkout': '2024-07-07', 'adults': 4}))
    await agent.session.assert_that(Expect.content.contains("Key West", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Florida", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("July 1", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("July 7", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("waterfront", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("fishing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("4", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("guys", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("water", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("boat", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide waterfront Airbnb listings in Key West, Florida for 4 adults on a fishing trip from July 1-7, 2024. It should emphasize waterfront location, fishing access, boat docks or marinas, and accommodations suitable for a group of men on a fishing vacation.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_historic_tour(agent: TestAgent):
    response = await agent.generate_str("Looking for Airbnb in Williamsburg, Virginia for historical tour, family of 5 (3 adults, 2 kids)")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Williamsburg, Virginia', 'adults': 3, 'children': 2}))
    await agent.session.assert_that(Expect.content.contains("Williamsburg", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Virginia", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("historical", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("tour", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("family", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 kids", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("5", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("colonial", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("historic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in Williamsburg, Virginia suitable for a family of 5 (3 adults, 2 kids) on a historical tour. It should emphasize proximity to Colonial Williamsburg, historical sites, and family-friendly accommodations for educational tourism.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_craft_brewery_tour(agent: TestAgent):
    response = await agent.generate_str("Find accommodation in Portland, Oregon for craft beer tour, 3 adults, no specific dates")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Portland, Oregon', 'adults': 3}))
    await agent.session.assert_that(Expect.content.contains("Portland", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Oregon", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("craft beer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("brewery", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("tour", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("beer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb accommodations in Portland, Oregon for 3 adults on a craft brewery tour. It should emphasize Portland\u0027s beer culture, proximity to breweries, and accommodations suitable for a group exploring the local craft beer scene.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_ghost_town_exploration(agent: TestAgent):
    response = await agent.generate_str("Search for unique stays near Joshua Tree, California for stargazing trip, 2 adults")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Joshua Tree, California', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("Joshua Tree", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("California", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stargazing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("unique", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("near", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("desert", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("dark sky", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("astronomy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide unique Airbnb stays near Joshua Tree, California for 2 adults on a stargazing trip. It should emphasize dark skies, desert location, astronomy-friendly features, and unique accommodations suitable for night sky observation.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_graduation_ceremony(agent: TestAgent):
    response = await agent.generate_str("Need accommodation in Ann Arbor, Michigan for graduation weekend, 4 adults, May 3-6, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Ann Arbor, Michigan', 'checkin': '2024-05-03', 'checkout': '2024-05-06', 'adults': 4}))
    await agent.session.assert_that(Expect.content.contains("Ann Arbor", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Michigan", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("May 3", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("May 6", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("graduation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("4 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("weekend", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("university", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ceremony", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb accommodations in Ann Arbor, Michigan for 4 adults during graduation weekend (May 3-6, 2024). It should acknowledge the university context, high demand during graduation, and provide suitable group accommodations for the celebration.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_antique_shopping(agent: TestAgent):
    response = await agent.generate_str("Find charming B\u0026B style Airbnb in Hudson Valley, New York for antique shopping weekend, couple")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Hudson Valley, New York', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("Hudson", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Hudson Valley", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("New York", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("charming", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("B\u0026B", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("antique", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("shopping", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("couple", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("weekend", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("historic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("vintage", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide charming, B\u0026B-style Airbnb listings in Hudson Valley, New York suitable for a couple on an antique shopping weekend. It should emphasize historic charm, vintage appeal, and proximity to antique shops or markets in the area.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_jazz_festival(agent: TestAgent):
    response = await agent.generate_str("Looking for place in New Orleans during Jazz Fest, April 26-28, 2024, for 2 music lovers")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'New Orleans', 'checkin': '2024-04-26', 'checkout': '2024-04-28', 'adults': 2}))
    await agent.session.assert_that(Expect.judge.llm("Response provides New Orleans accommodations during festival time", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("New Orleans", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("April 26", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("April 28", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Jazz Fest", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("music", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("lovers", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("jazz", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("festival", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("French Quarter", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb listings in New Orleans for 2 music lovers during Jazz Fest (April 26-28, 2024). It should acknowledge the festival context, emphasize music scene proximity, and show properties suitable for festival attendees with consideration for high demand during the event.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_hiking_adventure(agent: TestAgent):
    response = await agent.generate_str("Search for mountain cabins near Zion National Park for hiking group of 6 adults")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Zion National Park', 'adults': 6}))
    await agent.session.assert_that(Expect.content.contains("Zion", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("National Park", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("mountain", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cabin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("hiking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("6 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("group", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("near", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("outdoor", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("adventure", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("trail", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide mountain cabin listings near Zion National Park suitable for a hiking group of 6 adults. It should emphasize outdoor adventure, proximity to hiking trails, and group accommodations with mountain/wilderness setting appropriate for hikers.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_comedy_show_weekend(agent: TestAgent):
    response = await agent.generate_str("Find accommodation in Chicago for comedy show weekend, single traveler, under $150/night")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Chicago', 'adults': 1, 'maxPrice': 150}))
    await agent.session.assert_that(Expect.content.contains("Chicago", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("comedy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("show", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("weekend", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("single", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$150", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("under", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("solo", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("night", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide budget-friendly Airbnb accommodations in Chicago under $150 per night for a single traveler attending comedy shows. It should emphasize affordability, solo traveler suitability, and proximity to entertainment venues or comedy clubs.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_surfing_trip(agent: TestAgent):
    response = await agent.generate_str("Looking for beachside Airbnb in Santa Barbara for surfing, 3 adults, Aug 15-22, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Santa Barbara', 'checkin': '2024-08-15', 'checkout': '2024-08-22', 'adults': 3}))
    await agent.session.assert_that(Expect.content.contains("Santa Barbara", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("August 15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("August 22", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("beachside", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("surfing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("beach", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ocean", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("surf", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("wave", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide beachside Airbnb listings in Santa Barbara for 3 adults on a surfing trip from August 15-22, 2024. It should emphasize beach access, proximity to surf spots, and accommodations suitable for surfers with ocean views or beach location.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_film_festival(agent: TestAgent):
    response = await agent.generate_str("Need stylish accommodation in Park City during Sundance Film Festival for 2 industry professionals")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Park City', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("Park City", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Sundance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Film Festival", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stylish", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("industry", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("professionals", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("festival", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("upscale", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("film", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide stylish, upscale Airbnb accommodations in Park City for 2 film industry professionals during Sundance Film Festival. It should emphasize high-end amenities, professional-friendly features, and proximity to festival venues suitable for industry networking.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_leaf_peeping(agent: TestAgent):
    response = await agent.generate_str("Find cozy cabin in Vermont for fall foliage viewing, Oct 5-12, 2024, 2 adults, 1 child")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Vermont', 'checkin': '2024-10-05', 'checkout': '2024-10-12', 'adults': 2, 'children': 1}))
    await agent.session.assert_that(Expect.content.contains("Vermont", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("October 5", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("October 12", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cozy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cabin", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("fall foliage", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 child", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("autumn", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("leaves", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("mountain", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide cozy cabin listings in Vermont for fall foliage viewing from October 5-12, 2024, suitable for 2 adults and 1 child. It should emphasize autumn colors, leaf peeping opportunities, and family-friendly accommodations in scenic mountain areas.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_casino_weekend(agent: TestAgent):
    response = await agent.generate_str("Search for accommodation on Las Vegas Strip for high rollers weekend, 2 adults, luxury budget $500+")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Las Vegas Strip', 'adults': 2, 'minPrice': 500}))
    await agent.session.assert_that(Expect.content.contains("Las Vegas", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Strip", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("high rollers", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("weekend", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("luxury", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$500", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("casino", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("premium", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("upscale", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide luxury Airbnb accommodations on the Las Vegas Strip over $500 per night for 2 adults on a high rollers weekend. It should emphasize high-end amenities, proximity to casinos, and premium features suitable for affluent gamblers.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_genealogy_research(agent: TestAgent):
    response = await agent.generate_str("Looking for quiet place in Salt Lake City for genealogy research trip, solo traveler, 1 week")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Salt Lake City', 'adults': 1}))
    await agent.session.assert_that(Expect.content.contains("Salt Lake City", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("genealogy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("research", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("quiet", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("solo", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 week", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("traveler", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("peaceful", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("library", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("extended stay", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("workspace", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide quiet Airbnb accommodations in Salt Lake City suitable for a solo traveler on a week-long genealogy research trip. It should emphasize peaceful environment, proximity to research facilities like libraries or Family History Library, and extended stay suitability.", min_score=0.75), response=response)

@pytest.mark.asyncio
async def test_motorcycle_rally(agent: TestAgent):
    response = await agent.generate_str("Find accommodation in Sturgis, South Dakota for motorcycle rally, 4 bikers, budget under $200/night")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Sturgis, South Dakota', 'adults': 4, 'maxPrice': 200}))
    await agent.session.assert_that(Expect.content.contains("Sturgis", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("South Dakota", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("motorcycle", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("rally", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("4", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bikers", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("$200", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("budget", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("group", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide budget-friendly Airbnb accommodations in Sturgis, South Dakota under $200 per night for 4 bikers attending a motorcycle rally. It should emphasize motorcycle parking, group accommodations, and rally-related features suitable for the biker community.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_literary_tour(agent: TestAgent):
    response = await agent.generate_str("Search for bookish accommodation in Concord, Massachusetts for literature tour, 2 adults")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Concord, Massachusetts', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("Concord", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Massachusetts", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bookish", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("literature", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("tour", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("literary", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("historic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Thoreau", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Emerson", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(10000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide bookish or literary-themed Airbnb accommodations in Concord, Massachusetts for 2 adults on a literature tour. It should emphasize the town\u0027s literary history, proximity to sites like Walden Pond, and connections to authors like Thoreau, Emerson, and Alcott.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_space_center_visit(agent: TestAgent):
    response = await agent.generate_str("Find family-friendly place near Kennedy Space Center, Florida for 2 adults and 3 kids")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Kennedy Space Center, Florida', 'adults': 2, 'children': 3}))
    await agent.session.assert_that(Expect.content.contains("Kennedy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("Kennedy Space Center", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Florida", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("family-friendly", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("3 kids", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("near", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("space", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("NASA", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("family", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("children", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("educational", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide family-friendly Airbnb accommodations near Kennedy Space Center, Florida for 2 adults and 3 children. It should emphasize proximity to the space center, educational value for kids, and family-suitable amenities for a space-themed vacation.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_horse_racing(agent: TestAgent):
    response = await agent.generate_str("Need accommodation in Louisville for Kentucky Derby weekend, 6 adults, May 2-5, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_search", {'location': 'Louisville', 'checkin': '2024-05-02', 'checkout': '2024-05-05', 'adults': 6}))
    await agent.session.assert_that(Expect.content.contains("Louisville", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_search", min_times=1))
    await agent.session.assert_that(Expect.content.contains("May 2", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("May 5", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Kentucky Derby", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("6 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("weekend", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_search", expected_output='array', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("horse", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("racing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Derby", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Churchill Downs", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(3))
    await agent.session.assert_that(Expect.performance.response_time_under(12000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide Airbnb accommodations in Louisville for 6 adults during Kentucky Derby weekend (May 2-5, 2024). It should acknowledge the major racing event, high demand during Derby weekend, and show group accommodations suitable for race attendees.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_detailed_listing_check(agent: TestAgent):
    response = await agent.generate_str("I found listing ID ABC123XYZ from a search, can you show me all the details?")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'ABC123XYZ'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides comprehensive details about the specific listing", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("ABC123XYZ", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("listing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Airbnb", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for the specific Airbnb listing ID ABC123XYZ. It should include property information, amenities, pricing, location details, and booking information. The response should be focused on this single listing rather than search results.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_pricing_check_with_dates(agent: TestAgent):
    response = await agent.generate_str("Show me full details for listing 999888777 including pricing for Dec 1-7, 2024 for 2 people")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': '999888777', 'checkin': '2024-12-01', 'checkout': '2024-12-07', 'adults': 2}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("999888777", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("December 1", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("December 7", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 people", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pricing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("price", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cost", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for listing 999888777 with specific pricing information for December 1-7, 2024 for 2 people. It should include detailed property information, amenities, total costs, and availability for the specified dates and guest count.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_family_listing_details(agent: TestAgent):
    response = await agent.generate_str("Get details for property 555444333 for our family stay - 2 adults, 2 children, 1 infant from June 15-22, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': '555444333', 'checkin': '2024-06-15', 'checkout': '2024-06-22', 'adults': 2, 'children': 2, 'infants': 1}))
    await agent.session.assert_that(Expect.judge.llm("Response shows family-appropriate listing details", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("555444333", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("June 15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("June 22", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("family", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 children", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("1 infant", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stay", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("property", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for property 555444333 tailored for a family stay with 2 adults, 2 children, and 1 infant from June 15-22, 2024. It should include family-friendly amenities, capacity confirmation, and pricing for the specific dates and guest composition.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_pet_friendly_details(agent: TestAgent):
    response = await agent.generate_str("I need full information about listing PET456DOG including pet policies for me and my 2 cats")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'PET456DOG', 'adults': 1, 'pets': 2}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("PET456DOG", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("pet", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("policies", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2 cats", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cats", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("listing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pet-friendly", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("fee", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for listing PET456DOG with specific focus on pet policies for 2 cats. It should include pet fees, restrictions, amenities for pets, and any special rules or accommodations for traveling with cats.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_group_booking_details(agent: TestAgent):
    response = await agent.generate_str("Show me everything about listing GROUP789 for our group of 8 adults staying March 10-15, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'GROUP789', 'checkin': '2024-03-10', 'checkout': '2024-03-15', 'adults': 8}))
    await agent.session.assert_that(Expect.judge.llm("Response provides detailed information suitable for large group booking", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("GROUP789", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("March 10", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("March 15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("8 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("group", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("everything", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("capacity", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bedroom", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accommodate", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for listing GROUP789 suitable for a large group of 8 adults from March 10-15, 2024. It should include capacity confirmation, bedroom/bathroom details, group amenities, total pricing, and features that accommodate large groups.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_amenity_verification(agent: TestAgent):
    response = await agent.generate_str("Can you get full details on listing POOL123SPA to verify it has the amenities listed?")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'POOL123SPA'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides detailed amenity information for the listing", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("POOL123SPA", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("amenities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pool", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("spa", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("verify", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("features", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("facilities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("hot tub", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for listing POOL123SPA with emphasis on verifying amenities. It should clearly list and confirm amenities like pool, spa, hot tub, and other facilities. The response should help verify what amenities are actually available at the property.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_availability_confirmation(agent: TestAgent):
    response = await agent.generate_str("Check availability and pricing for listing AVAIL2024 for New Year\u0027s Eve Dec 30, 2024 to Jan 2, 2025 for 4 adults")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'AVAIL2024', 'checkin': '2024-12-30', 'checkout': '2025-01-02', 'adults': 4}))
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("AVAIL2024", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("December 30", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("January 2", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("2025", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("New Year", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("4 adults", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("availability", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pricing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("available", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("total", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should check and confirm availability for listing AVAIL2024 during New Year\u0027s Eve period (December 30, 2024 to January 2, 2025) for 4 adults. It should provide clear pricing information, availability status, and any holiday-specific rates or restrictions.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_house_rules_check(agent: TestAgent):
    response = await agent.generate_str("I want to see the house rules and policies for listing RULES567 before booking")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'RULES567'}))
    await agent.session.assert_that(Expect.judge.llm("Response includes house rules and policy information from the listing", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("RULES567", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("house rules", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("policies", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("before booking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("rules", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("check-in", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("check-out", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("smoking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("party", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cancellation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive house rules and policies for listing RULES567. It should include check-in/out times, smoking policy, party restrictions, cancellation policy, and other important rules guests need to know before booking.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_cancellation_policy_check(agent: TestAgent):
    response = await agent.generate_str("Show me details including cancellation policy for listing CANCEL890")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'CANCEL890'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("CANCEL890", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("cancellation policy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cancellation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("policy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("refund", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("flexible", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("strict", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("moderate", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for listing CANCEL890 with specific emphasis on the cancellation policy. It should clearly explain the cancellation terms, refund conditions, deadlines, and policy type (flexible, moderate, strict, etc.).", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_host_information(agent: TestAgent):
    response = await agent.generate_str("Get full host information and reviews for listing HOST246")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'HOST246'}))
    await agent.session.assert_that(Expect.judge.llm("Response includes host information and review details", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("HOST246", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("host", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("reviews", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("rating", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("superhost", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("response", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("guest", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("experience", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("communication", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive host information for listing HOST246 including host profile, ratings, reviews, response time, superhost status if applicable, and guest feedback about the host\u0027s communication and service quality.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_photo_gallery_request(agent: TestAgent):
    response = await agent.generate_str("I want to see all photos and details for listing PHOTO135")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'PHOTO135'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("PHOTO135", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("photos", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("images", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("gallery", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("picture", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("view", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bedroom", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("kitchen", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bathroom", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for listing PHOTO135 with emphasis on visual content. It should include property photos, room images, and detailed descriptions that help visualize the space including bedrooms, bathrooms, kitchen, and common areas.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_location_details(agent: TestAgent):
    response = await agent.generate_str("Show me neighborhood information and location details for listing LOC468")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'LOC468'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides location and neighborhood information from the listing", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("LOC468", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("neighborhood", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("location", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("area", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("nearby", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("transportation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("restaurant", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("attraction", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("walk", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive neighborhood and location information for listing LOC468. It should include details about the surrounding area, nearby attractions, restaurants, transportation options, walkability, and local amenities that help guests understand the location context.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_accessibility_info(agent: TestAgent):
    response = await agent.generate_str("I need accessibility information for listing ACCESS111 for my elderly parents")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'ACCESS111'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("ACCESS111", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("accessibility", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("elderly", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("parents", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("accessible", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("wheelchair", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stairs", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("step-free", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bathroom", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("mobility", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("entrance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive accessibility information for listing ACCESS111 suitable for elderly guests. It should include details about wheelchair access, step-free entry, bathroom accessibility, mobility features, and any accommodations for guests with limited mobility.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_instant_book_check(agent: TestAgent):
    response = await agent.generate_str("Check if listing INSTANT999 is available for instant booking")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'INSTANT999'}))
    await agent.session.assert_that(Expect.judge.llm("Response indicates booking availability and process for the listing", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("INSTANT999", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("instant booking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("instant book", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("available", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("booking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("immediate", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("confirmation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("approve", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("request", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should clearly indicate whether listing INSTANT999 is available for instant booking or requires host approval. It should explain the booking process, whether guests can book immediately without waiting for host confirmation, and any relevant booking policies.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_seasonal_pricing(agent: TestAgent):
    response = await agent.generate_str("Get pricing details for listing SEASON777 during peak summer season July 15-22, 2024")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'SEASON777', 'checkin': '2024-07-15', 'checkout': '2024-07-22'}))
    await agent.session.assert_that(Expect.content.contains("2024", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("SEASON777", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("July 15", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("July 22", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pricing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("peak", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("summer", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("season", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("rate", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cost", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("total", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide detailed pricing information for listing SEASON777 during peak summer season (July 15-22, 2024). It should include seasonal rates, any peak season surcharges, total costs, and explain how summer pricing affects the overall cost compared to regular rates.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_compare_listings_prep(agent: TestAgent):
    response = await agent.generate_str("Get full details for listing COMP123 so I can compare it with other options")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'COMP123'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides comprehensive listing details suitable for comparison", min_score=0.8), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("COMP123", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("full details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("compare", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("options", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("amenities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("pricing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("features", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("specifications", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("comprehensive", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive, detailed information for listing COMP123 that would be useful for comparison purposes. It should include all key details like pricing, amenities, features, capacity, location, and policies that help evaluate this property against other options.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_long_term_stay(agent: TestAgent):
    response = await agent.generate_str("I need details for listing MONTHLY888 for a potential month-long stay")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'MONTHLY888'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("MONTHLY888", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("month-long", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("monthly", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("long-term", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stay", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("discount", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("extended", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("minimum", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("28 days", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("30 days", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide detailed information for listing MONTHLY888 with emphasis on long-term stay suitability. It should include monthly discounts, minimum stay requirements, extended stay policies, and amenities that make it suitable for month-long accommodations.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_special_event_booking(agent: TestAgent):
    response = await agent.generate_str("Show me details for listing EVENT456 for a potential wedding booking")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'EVENT456'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides listing details relevant for special event use", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("EVENT456", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("wedding", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("event", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("special", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("booking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("celebration", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("party", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("gathering", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("capacity", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("venue", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive details for listing EVENT456 with emphasis on its suitability for wedding events. It should include event policies, capacity for celebrations, special event fees, party restrictions, and amenities that make it suitable for wedding gatherings.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_business_travel_details(agent: TestAgent):
    response = await agent.generate_str("I need work-friendly amenity details for listing WORK789 for extended business stay")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'WORK789'}))
    await agent.session.assert_that(Expect.judge.llm("Response highlights business-friendly features of the listing", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("WORK789", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("work-friendly", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("business", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("extended", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("amenity", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("WiFi", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("workspace", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("desk", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("office", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("professional", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide detailed information about work-friendly amenities for listing WORK789 suitable for extended business stays. It should emphasize professional amenities like WiFi, dedicated workspace, desk, office setup, and features that support remote work and business travel needs.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_safety_features(agent: TestAgent):
    response = await agent.generate_str("Show me safety features and security information for listing SAFE234")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'SAFE234'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("SAFE234", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("safety", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("security", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("features", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("information", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("smoke detector", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("carbon monoxide", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("fire extinguisher", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("first aid", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("lock", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("alarm", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive safety and security information for listing SAFE234. It should include details about safety equipment like smoke detectors, carbon monoxide detectors, fire extinguishers, first aid kits, security features like locks and alarms, and any other safety measures in place.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_last_minute_booking(agent: TestAgent):
    response = await agent.generate_str("Check availability for last-minute booking at listing LASTMIN567 for tonight")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'LASTMIN567'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides current availability and booking information", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("LASTMIN567", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("last-minute", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("availability", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("tonight", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("booking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("available", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("same-day", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("immediate", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("instant", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("check-in", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should check availability for listing LASTMIN567 for same-day/tonight booking. It should provide immediate availability status, check-in procedures for last-minute bookings, and any policies or restrictions related to same-day reservations.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_eco_friendly_features(agent: TestAgent):
    response = await agent.generate_str("I want to know about eco-friendly features at listing GREEN890")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'GREEN890'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("GREEN890", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("eco-friendly", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("features", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("green", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("sustainable", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("solar", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("energy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recycling", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("organic", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("environmental", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("efficient", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive information about eco-friendly features at listing GREEN890. It should include details about sustainable practices, energy efficiency, solar power, recycling programs, organic amenities, and other environmentally conscious features available at the property.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_kitchen_cooking_details(agent: TestAgent):
    response = await agent.generate_str("Show me kitchen amenities and cooking facilities for listing COOK345")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'COOK345'}))
    await agent.session.assert_that(Expect.judge.llm("Response details kitchen and cooking amenities available", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("COOK345", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("kitchen", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cooking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("amenities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("facilities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("refrigerator", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stove", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("oven", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("microwave", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("dishwasher", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("cookware", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive information about kitchen amenities and cooking facilities for listing COOK345. It should include details about appliances like refrigerator, stove, oven, microwave, dishwasher, as well as cookware, utensils, and other cooking essentials available for guests.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_parking_transportation(agent: TestAgent):
    response = await agent.generate_str("I need parking and transportation details for listing PARKING678")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'PARKING678'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("PARKING678", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("parking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("transportation", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("garage", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("driveway", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("street parking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("public transport", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("bus", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("subway", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("metro", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive parking and transportation information for listing PARKING678. It should include details about parking availability (garage, driveway, street parking), public transportation access (bus, subway, metro), and other transportation options available near the property.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_wifi_workspace_info(agent: TestAgent):
    response = await agent.generate_str("Check WiFi speed and workspace setup for listing WIFI912 for remote work")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'WIFI912'}))
    await agent.session.assert_that(Expect.judge.llm("Response includes WiFi and workspace information for remote work", min_score=0.75), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("WIFI912", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("WiFi", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("speed", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("workspace", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("remote work", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("setup", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("internet", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("desk", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("chair", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("broadband", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Mbps", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("office", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive information about WiFi speed and workspace setup for listing WIFI912 suitable for remote work. It should include internet speed details (Mbps), workspace amenities like desk and chair, and other features that support productive remote work.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_entertainment_amenities(agent: TestAgent):
    response = await agent.generate_str("Show me entertainment options and amenities at listing FUN234")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'FUN234'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("FUN234", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("entertainment", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("options", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("amenities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("TV", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("Netflix", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("streaming", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("games", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("music", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("sound system", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("gaming", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive entertainment options and amenities for listing FUN234. It should include details about TV/streaming services, gaming options, music systems, recreational activities, and other entertainment features available for guests\u0027 enjoyment.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_check_in_process(agent: TestAgent):
    response = await agent.generate_str("I need check-in instructions and process details for listing CHECKIN567")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'CHECKIN567'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides check-in process and instruction details", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("CHECKIN567", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("check-in", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("instructions", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("process", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("details", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("key", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("lockbox", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("time", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("arrival", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("contact", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("host", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive check-in instructions and process details for listing CHECKIN567. It should include information about check-in times, key retrieval (lockbox, host meeting), arrival procedures, contact information, and step-by-step instructions for accessing the property.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_guest_reviews_analysis(agent: TestAgent):
    response = await agent.generate_str("Show me recent guest reviews and ratings for listing REVIEW890")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'REVIEW890'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("REVIEW890", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("guest", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("reviews", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("ratings", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recent", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("stars", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("feedback", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("experience", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("stayed", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recommend", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("score", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive guest reviews and ratings analysis for listing REVIEW890. It should include recent guest feedback, star ratings, overall scores, guest experiences, and any patterns or insights from the reviews that help evaluate the property\u0027s quality and guest satisfaction.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_cleaning_protocols(agent: TestAgent):
    response = await agent.generate_str("I want to know about cleaning and sanitization protocols for listing CLEAN123")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'CLEAN123'}))
    await agent.session.assert_that(Expect.judge.llm("Response includes cleaning and safety protocol information", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("CLEAN123", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("cleaning", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("sanitization", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("protocols", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("disinfect", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("hygiene", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("enhanced", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("COVID", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("safety", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("sterilize", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("health", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive information about cleaning and sanitization protocols for listing CLEAN123. It should include details about enhanced cleaning procedures, disinfection methods, hygiene standards, COVID-19 safety measures, and health protocols implemented by the host.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_minimum_stay_requirements(agent: TestAgent):
    response = await agent.generate_str("Check minimum stay requirements and booking restrictions for listing MIN456")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'MIN456'}))
    await agent.session.assert_that(Expect.content.contains("airbnb.com", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("MIN456", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("minimum stay", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("requirements", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("booking", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("restrictions", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("nights", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("minimum", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("days", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("policy", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("advance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("notice", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive information about minimum stay requirements and booking restrictions for listing MIN456. It should include details about minimum number of nights, advance booking requirements, seasonal restrictions, and any other booking policies or limitations.", min_score=0.8), response=response)

@pytest.mark.asyncio
async def test_local_attractions_info(agent: TestAgent):
    response = await agent.generate_str("Show me nearby attractions and local recommendations for listing LOCAL789")
    await agent.session.assert_that(Expect.tools.called_with("airbnb_listing_details", {'id': 'LOCAL789'}))
    await agent.session.assert_that(Expect.judge.llm("Response provides local area and attraction information", min_score=0.7), response=response)
    await agent.session.assert_that(Expect.tools.was_called("airbnb_listing_details", min_times=1))
    await agent.session.assert_that(Expect.content.contains("LOCAL789", case_sensitive=True), response=response)
    await agent.session.assert_that(Expect.content.contains("nearby", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("attractions", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("local", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("recommendations", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.tools.output_matches(tool_name="airbnb_listing_details", expected_output='object', field_path=None, match_type="type", case_sensitive=True, call_index=-1))
    await agent.session.assert_that(Expect.content.contains("restaurant", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("things to do", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("activities", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("sightseeing", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("places to visit", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.content.contains("walking distance", case_sensitive=False), response=response)
    await agent.session.assert_that(Expect.performance.max_iterations(2))
    await agent.session.assert_that(Expect.performance.response_time_under(8000.0))
    await agent.session.assert_that(Expect.judge.llm("The response should provide comprehensive information about nearby attractions and local recommendations for listing LOCAL789. It should include details about restaurants, activities, sightseeing spots, things to do, places to visit, and distances to key attractions from the property.", min_score=0.8), response=response)


